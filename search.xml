<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大学的快乐与遗憾时光</title>
      <link href="/p/20220617/"/>
      <url>/p/20220617/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="86ec218a52744a141091f472053003fa5b67f91912d0ab4ecbff71c02cc7ebf1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rPPG —— 非接触式心率测量程序</title>
      <link href="/p/20220613/"/>
      <url>/p/20220613/</url>
      
        <content type="html"><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>heartbeat是一个国外的大佬发起的项目，自2016年维护至今，主要用途是利用视频图像完成非接触式心率测量，主要应用到的技术有深度学习和计算机视觉。<br>该项目拥有<a href="https://github.com/prouast/heartbeat">PC</a>、<a href="https://github.com/prouast/heartbeat-js">Web</a>、<a href="https://github.com/prouast/heartbeat-android">安卓</a>三个版本。</p><h1 id="Mac-m1运行Heartbeat"><a href="#Mac-m1运行Heartbeat" class="headerlink" title="Mac m1运行Heartbeat"></a>Mac m1运行Heartbeat</h1><h2 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h2><p>最简单的方法是在自己的电脑上安装brew，然后通过<code>brew install opencv</code>安装。</p><p>如果在安装过程中出现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Installing xxx dependency: yyy</span><br><span class="line">==&gt; ...</span><br><span class="line">Error: No such file or directory @ rb_sysopen - ...</span><br></pre></td></tr></table></figure><p>这种情况是因为<code>yyy</code>包安装失败，使用<code>brew install yyy</code>单独下载该依赖包即可。</p><h2 id="查看opencv"><a href="#查看opencv" class="headerlink" title="查看opencv"></a>查看opencv</h2><p>安装完成后，执行<code>pkg-config --cflags --libs opencv</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhinushannan@zhinushannan-deMacBook-Air /usr/local/lib/pkgconfig$ pkg-config --cflags --libs opencv                                </span><br><span class="line">-I/opt/homebrew/Cellar/opencv/4.5.5_2/include/opencv4 -L/opt/homebrew/Cellar/opencv/4.5.5_2/lib -lopencv_shape -lopencv_stitching -lopencv_objdetect -lopencv_superres -lopencv_videostab -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_imgcodecs -lopencv_video -lopencv_photo -lopencv_ml -lopencv_imgproc -lopencv_flann -lopencv_core</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将输出结果中对应的<code>-I/opt/homebrew/Cellar/opencv/4.5.5_2/include/opencv4 -L/opt/homebrew/Cellar/opencv/4.5.5_2/lib</code>记录，后面有用。</p><p>若提示没有<code>pkg-config</code>，则直接执行<code>brew install pkg-config</code>命令安装即可。若提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Package opencv was not found in the pkg-config search path.</span><br><span class="line">Perhaps you should add the directory containing `opencv.pc&#x27;</span><br><span class="line">to the PKG_CONFIG_PATH environment variable</span><br><span class="line">No package &#x27;opencv&#x27; found</span><br></pre></td></tr></table></figure><p>是因为没有<code>opencv.pc</code>这个文件。<br>执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/lib</span><br><span class="line">sudo mkdir pkgconfig</span><br><span class="line">sudo vim opencv.pc</span><br></pre></td></tr></table></figure><p>其中，<code>opencv.pc</code>文件的内容为（其中prefix是brew安装的opencv的路径，可以通过<code>brew info opencv</code>查看）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">prefix=/opt/homebrew/Cellar/opencv/4.5.5_2</span><br><span class="line">exec_prefix=$&#123;prefix&#125;</span><br><span class="line">includedir=$&#123;prefix&#125;/include</span><br><span class="line">libdir=$&#123;exec_prefix&#125;/lib</span><br><span class="line"></span><br><span class="line">Name: opencv</span><br><span class="line">Description: The opencv library</span><br><span class="line">Version:4.0.1</span><br><span class="line">Cflags: -I$&#123;includedir&#125;/opencv4</span><br><span class="line">Libs: -L$&#123;libdir&#125; -lopencv_shape -lopencv_stitching -lopencv_objdetect -lopencv_superres -lopencv_videostab -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_imgcodecs -lopencv_video -lopencv_photo -lopencv_ml -lopencv_imgproc -lopencv_flann  -lopencv_core</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>在<code>~/.bash_profile</code>中添加：<code>export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig</code>（前提要满足<a href="/p/20220604">Macbook m1常见环境变量配置</a>中的前置条件），编译一下<code>source ~/.bash_profile</code>。</p><h2 id="下载、编译、执行Heartbeat"><a href="#下载、编译、执行Heartbeat" class="headerlink" title="下载、编译、执行Heartbeat"></a>下载、编译、执行Heartbeat</h2><p>下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:prouast/heartbeat.git</span><br></pre></td></tr></table></figure><p>下载完成后，进入下载目录，查看<code>Makefile</code>文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Makefile <span class="keyword">for</span> heartbeat</span></span><br><span class="line">appname := Heartbeat</span><br><span class="line"></span><br><span class="line">CXX := g++</span><br><span class="line">RM := rm -f</span><br><span class="line">CXXFLAGS := -Wall -g -std=c++11 -I/usr/local/include/opencv4 -I/usr/include/opencv4</span><br><span class="line">LDFLAGS := -g</span><br><span class="line">LDLIBS := -lopencv_core -lopencv_dnn -lopencv_highgui -lopencv_imgcodecs -lopencv_imgproc -lopencv_objdetect -lopencv_video -lopencv_videoio</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>修改其中的<code>CXXFLAGS</code>的两个<code>-I</code>值，值为上一步中记录的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CXXFLAGS := -Wall -g -std=c++11 -I/usr/local/include/opencv4 -I/usr/include/opencv4</span></span><br><span class="line">CXXFLAGS := -Wall -g -std=c++11 -I/opt/homebrew/Cellar/opencv/4.5.5_2/include/opencv4 -L/opt/homebrew/Cellar/opencv/4.5.5_2/lib</span><br></pre></td></tr></table></figure><p>修完完成后保存，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>待编译完成后，执行<code>./Heartbeat</code>，稍等几秒，会弹出一个窗口（第一次执行会申请摄像头权限）：</p><p><img src="/images/%E5%85%B6%E4%BB%96/heartbeat/1Mac%E7%89%88Heartbeat%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="1Mac版Heartbeat执行效果"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/p/20220610/"/>
      <url>/p/20220610/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程与线程</title>
      <link href="/p/20220609/"/>
      <url>/p/20220609/</url>
      
        <content type="html"><![CDATA[<p>操作系统上一篇：<a href="/p/20220513/" target="_blank">操作系统概述</a><br>操作系统下一篇：进程同步与通信</p><h1 id="进程的引入"><a href="#进程的引入" class="headerlink" title="进程的引入"></a>进程的引入</h1><h2 id="进程与程序"><a href="#进程与程序" class="headerlink" title="进程与程序"></a>进程与程序</h2><p>进程是<strong>可并发执行的程序</strong>在一个<strong>数据集合</strong>上的执行过程。</p><p>程序是一个按顺序设计的计算机指令的集合，而进程就是执行这个指令集合的过程。<strong>程序是一个存放在计算机存储空间内的静态文件</strong>。</p><h2 id="单道程序的顺序执行"><a href="#单道程序的顺序执行" class="headerlink" title="单道程序的顺序执行"></a>单道程序的顺序执行</h2><h3 id="程序的顺序执行"><a href="#程序的顺序执行" class="headerlink" title="程序的顺序执行"></a>程序的顺序执行</h3><img src="/images/操作系统/3进程与线程/1.顺序执行时操作的先后次序.png" style="zoom: 50%;"><p>顺序执行中，每个程序的执行顺序是严格按照次序先后关系进行的。例如：</p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.%E7%A8%8B%E5%BA%8F%E6%AE%B5%E7%9A%84%E6%89%A7%E8%A1%8C.png" alt="程序段的执行.png"></p><p>在单道环境中，程序段的执行也是严格按照顺序执行的。</p><h3 id="顺序执行的特征"><a href="#顺序执行的特征" class="headerlink" title="顺序执行的特征"></a>顺序执行的特征</h3><ol><li>顺序性：程序在执行时，严格按照规定的顺序执行。</li><li>封闭性：程序是在封闭的环境中执行的，程序在执行时独占系统中的全部资源。</li><li>可再现性：当程序被重复执行时，只要初始条件相同，其执行结果必然相同。</li></ol><p>应用：这些特征给测试和修改程序带来了很大的方便（debug）。</p><h2 id="多道程序的并发执行"><a href="#多道程序的并发执行" class="headerlink" title="多道程序的并发执行"></a>多道程序的并发执行</h2><p>单道程序系统浪费资源、效率低下，现代操作系统几乎不采用，而广泛采用多道程序设计技术。多道程序设计是在内存中存放多道程序，他们在操作系统的控制下在CPU上交替执行。</p><h3 id="程序的并发执行"><a href="#程序的并发执行" class="headerlink" title="程序的并发执行"></a>程序的并发执行</h3><p>为了提高计算机内各种资源的利用率，提高计算机系统的处理能力，并发处理技术得到广泛的应用。<br>而有些计算是允许并发执行的，有些操作是需要顺序执行的。<br>例如，下面两张图中，第一张图的计算是必须按照顺序执行的，而第二张图可以并发执行：<br><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.%E7%A8%8B%E5%BA%8F%E6%AE%B5%E7%9A%84%E6%89%A7%E8%A1%8C.png" alt="程序段的执行.png"><br><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/3.%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%AE%B5.png" alt="并发执行的程序段.png"></p><h3 id="并发执行的条件-——-Bernstein"><a href="#并发执行的条件-——-Bernstein" class="headerlink" title="并发执行的条件 —— Bernstein"></a>并发执行的条件 —— Bernstein</h3><p>对于两个进程P1、P2，记P1的读集、写集分别为R(P1)、W(P1)，P2的读集、写集为R(P2)、R(P2)，若满足：<code>R(P1)∩W(P2)∪R(P2)∩W(P1)∪W(P1)∩W(P2)=&#123;&#125;</code>，则P1、P2可以并发执行且具有再现性。</p><p>范例:<br>对于：<br>P1：    a&#x3D;5<br>P2：    b&#x3D;6<br>P3：    c&#x3D;a+b<br>P4：    d&#x3D;c+1</p><p>的执行图如下：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LRP1 --&gt; P3p2 --&gt; P3P3 --&gt; P4  </pre></div><blockquote><p>P1:  a&#x3D;5<br>P2:  b&#x3D;6<br>R(P1)&#x3D;{} W(P1)&#x3D;{a}<br>R(P2)&#x3D;{} W(P2)&#x3D;{b}<br>R(P1) ∩W(P2)&#x3D;{} R(P2) ∩W(P1)&#x3D;{}<br>W(P1) ∩W(P2)&#x3D;{}<br>R(P1)∩W(P2)∪R(P2)∩W(P1)∪W(P1)∩W(P2)&#x3D;{}<br>P1、P2可以并发执行</p></blockquote><blockquote><p>P3:c&#x3D;a+b<br>P4:d&#x3D;c+1<br>R(P3)&#x3D;{a,b} W(P3)&#x3D;{c}<br>R(P4)&#x3D;{c} W(P4)&#x3D;{d}<br>R(P3) ∩ W(P4)&#x3D;{}<br>R(P4) ∩ W(P3)&#x3D;{c}<br>R(P3) ∩ W(P4) ∪ R(P4) ∩ W(P3) ∪ W(P3) ∩ W(P4) &#x3D;{c}<br>P3、P4不能并发执行</p></blockquote><h3 id="程序并发执行的特征"><a href="#程序并发执行的特征" class="headerlink" title="程序并发执行的特征"></a>程序并发执行的特征</h3><ol><li>间断性：进程之间需要相互配合，有时需要暂停等待另一个进程执行完毕才可以继续执行。</li><li>失去封闭性：多个程序共享系统的各种资源，这些资源的状态由多个程序改变，致使其失去封闭性。</li><li>失去可再现性：由于失去了封闭性，系统的资源状态的变化是不可预测的，因而也失去了可再现性。</li></ol><h3 id="进程与程序的对应关系"><a href="#进程与程序的对应关系" class="headerlink" title="进程与程序的对应关系"></a>进程与程序的对应关系</h3><table><thead><tr><th align="center">进程</th><th align="center">程序</th></tr></thead><tbody><tr><td align="center">动态的</td><td align="center">静态的</td></tr><tr><td align="center">并发的</td><td align="center">顺序的</td></tr><tr><td align="center">暂时的</td><td align="center">永久的</td></tr></tbody></table><p>进程的数据结构 &#x3D; 程序 + 数据 + PCB<br>程序与进程不是一一对应的关系，一个程序可以产生多个进程。</p><h1 id="进程的状态及组成"><a href="#进程的状态及组成" class="headerlink" title="进程的状态及组成"></a>进程的状态及组成</h1><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><h3 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h3><p>进程有3种基本状态，按照分类有执行和未执行，其中执行是<strong>运行</strong>状态，未执行包括<strong>就绪</strong>和<strong>阻塞</strong>状态。</p><ul><li>运行状态：进程正在处理机上运行的状态。</li><li>就绪状态：已经获得了除处理机之外的所有必要的资源。当进程处于该状态时，只要获得了处理机资源，就是运行状态。</li><li>阻塞状态：当进程由于等待输入或输出操作，或某个同步事件而暂停运行时的状态。</li></ul><p>三种状态存在转换关系：</p><img src="/images/操作系统/3进程与线程/4.三种进程状态转换.png" alt="三种进程状态转换" style="zoom: 50%;"><h3 id="创建状态和退出状态"><a href="#创建状态和退出状态" class="headerlink" title="创建状态和退出状态"></a>创建状态和退出状态</h3><p>许多操作系统中，除上述三种基本状态以外，还另外添加了创建状态和退出状态。</p><img src="/images/操作系统/3进程与线程/5.五种进程状态转换.png" alt="五种进程状态转换" style="zoom: 50%;"><p>创建状态的进程正在创建中，不能运行。在创建过程中，要做：</p><ul><li>为进程分配PCB结构，填写相关内容</li><li>为进程分配进程组，连接进程的父子关系</li><li>为进程分配所需的资源</li><li>为进程建立地址空间，填写相关管理内存的操作，加载程序等</li></ul><p>退出状态或异常结束，操作系统首先要将该进程从运行状态中移出，使之成为一个不可能再次运行的进程，即使其处于退出状态，并回收资源。<br>此时系统并不会立即撤销该进程，而是暂时留在系统中，以便让其他相关进程从该退出进程的PCB中收集有关信息。此外，还需要将退出代码传递给其父进程等。</p><h3 id="进程的挂起"><a href="#进程的挂起" class="headerlink" title="进程的挂起"></a>进程的挂起</h3><p>在一些操作系统中，对进程的状态增加了挂起状态。<br>挂起状态指的是将该进程存放至外存，在这种状态下，即使该进程等待的事件发生或者阻塞的原因解除，该挂起进程仍然不能进入就绪状态，因为它还在外存。<br>引入挂起状态由以下几个原因：</p><ol><li>内外存对换的需要：为了缓和内存紧张的情况，将内存中处于阻塞状态的进程换至外存，这样进程又处于一种有别于阻塞状态的新状态。</li><li>用户调试程序的需要：用户在调试自己爹程序时，希望其运行的程序暂时停止下来，以便对进程的地址空间进行读写。</li><li>实时系统中调节负载的需要：当实时系统负载较重时，可能会影响到系统对实时任务的控制和处理，此时系统需要将不太重要或者不太紧急的进程进行挂起，以保证系统对紧急事件的及时处理。</li></ol><img src="/images/操作系统/3进程与线程/6.双挂起进程状态转换.png" alt="双挂起进程状态转换" style="zoom: 50%;"><ol><li>阻塞-&gt;️阻塞挂起：当内存紧张时会将处于阻塞状态的进程从内存移至内存（即挂起），可以腾出更多的空间给新创建的进程或就绪的进程。</li><li>就绪-&gt;就绪挂起：当挂起一些阻塞进程之后仍无法满足内存的需要，或者当有高优先级阻塞的进程或低优先级就绪的进程时，系统会选择首先挂起低优先级的进程。（因为系统应当让高优先级的进程尽快完成）</li><li>运行-&gt;就绪挂起：在抢占式分时操作系统中，当高优先级阻塞挂起的进程因事件出现而进入就绪挂起状态时，系统可能将正在运行的进程状态转化为就绪挂起状态。</li><li>就绪挂起-&gt;就绪：当系统没有就绪的进程或者当就绪挂起的进程优先级高于就绪的进程时，会引起这种转改的转换。</li><li>阻塞挂起-&gt;阻塞：当进程时放了足够的内存空间，系统会将高优先级阻塞挂起的进程激活，移至内存当中。</li></ol><h2 id="进程控制块"><a href="#进程控制块" class="headerlink" title="进程控制块"></a>进程控制块</h2><h3 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h3><p>进程是由程序、数据、进程控制快（PCB）、栈四个部分组成的。</p><p>进程的活动是通过CPU上执行一系列<strong>程序</strong>和对相应<strong>数据</strong>进行操作来体现的，使用<strong>进程控制块</strong>来标识进程本身的特征、进程的状态、进程的调度信息以及对资源的占有情况等，同时，程序的执行通常设计用于跟踪过程调用和过程间参数传递的<strong>堆栈</strong>。</p><h3 id="PCB的作用"><a href="#PCB的作用" class="headerlink" title="PCB的作用"></a>PCB的作用</h3><p>记录操作系统所需的用于描述进程情况及控制进程运行的全部信息，使一个多道程序环境下不能独立运行的程序成为一个能独立运行的基本单位，是一个能与其他进程并发执行的进程。</p><ul><li>在操作系统需要调度某进程时，要从该进程的PCB中查找其运行状态和优先级</li><li>在调度某进程后，要根据PCB中所保存的处理机状态信息恢复运行的现场，并根据PCB中的程序和数据的内存地址找到该进程对应的程序和数据</li><li>进程执行过程中，当需要和其他相互合作的进程过实现同步、通信或文件访问时，也需要访问PCB</li><li>当进程因为某种原因暂停执行时，也要将其断点的处理机环境保存在PCB中</li></ul><h3 id="PCB的内容"><a href="#PCB的内容" class="headerlink" title="PCB的内容"></a>PCB的内容</h3><ol><li>进程描述信息<ol><li>进程名：由创建者提供，通常是对应可执行程序的名字。</li><li>进程标识符：为了方便系统使用而设置。在操作系统中，一般都为进程分配一个唯一的整数，作为进程标识符。通常是一个进程的序号。</li><li>用户名：创建该进程的用户名字。</li></ol></li><li>处理机状态信息<ol><li>通用寄存器：当程序运行时用于暂存信息。</li><li>指令计数器：存放要访问的下一条指令的地址。</li><li>程序状态字（PSW）寄存器：包括程序执行时的状态信息，包括条件码、执行方式、中断允许位等。</li><li>栈指针：每个进程都有一个或多个与之相关的地址栈，用于存放进程对应程序的过程和系统调用参数及返回地址，栈指针指向该栈的栈顶。</li></ol></li><li>进程调度信息<ol><li>进程的状态：指明该进程所处的状态。</li><li>进程的优先级：表示该进程的优先级程度的一个整数，优先级越高先获得处理机。</li><li>运行统计信息：这些信息与所采用的进程调度算法有关，其中包括进程已执行事件、等待时间等。</li><li>进程阻塞的原因：记录进程引起阻塞的原因。</li></ol></li><li>进程控制和资源占用信息<ol><li>程序入口地址：进程对应程序和数据的地址，当进程被调度执行时，用于找到其程序和数据。</li><li>程序的外存地址：进程被调出时使用的地址。当内存空间紧张时，进程可能会被调出内存，当内存有空闲空间时会被重新调入。</li><li>进程同步及通信机制：进程在执行时，可能会和其他进程有同步关系或相互通信，进程使用的信号量、消息队列指针等都要存放在PCB中。</li><li>资源占用信息：列出除CPU外，进程所需要的全部资源及已经占用的资源情况。</li><li>链接指针：指出本进程所在队列中下一个进程的PCB地址。</li></ol></li></ol><h3 id="进程控制块的组织"><a href="#进程控制块的组织" class="headerlink" title="进程控制块的组织"></a>进程控制块的组织</h3><p>一个系统中的进程有许多，每个进程都有一个进程控制块，因此管理好PCB，就管理好了进程。进程控制块的管理目前常用的是链接方式，即把具有相同运行状态的进程的PCB链接在一起，形成一个运行队列、就绪队列、阻塞队列、空闲队列。</p><img src="/images/操作系统/3进程与线程/7.PCB链接队列.png" alt="PCB链接队列" style="zoom: 60%"><p>对于单处理机系统，处于运行状态的进程只有1个，即无法组成运行队列。在多处理机系统中，运行队列以优先级高低的顺序排列。<br>对于阻塞队列，由于不同的进程阻塞原因可能不同，按照阻塞原因链接队列，例如有打印机队列、等待输入队列等。<br>空闲队列是将系统中空闲的进程控制块结构组织起来，以便新进程创建时，为之分配进程控制块。</p><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><p>进程控制的职能就是对系统中对全部进程实行有效的管理，其主要表现是对一个进程进行创建、撤销以及在某些进程状态之间的转换控制。</p><h2 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h2><h3 id="核心态和用户态"><a href="#核心态和用户态" class="headerlink" title="核心态和用户态"></a>核心态和用户态</h3><p>为了防止操作系统及其关键的数据结构（如PCB等）受到用户有意无意的破坏，通常将处理机的执行状态分为核心态和用户态。</p><ul><li>核心态：又称为系统态，具有较高的特权，能执行一切命令，访问所有寄存器和存储区。</li><li>用户态：具有较低特权的执行状态，只能执行规定的命令，访问指定的寄存器和存储区。</li></ul><p>通常，操作系统运行在核心态，用户程序运行在用户态。因此用户程序无法访问到操作系统的区域，防止了用户程序对操作系统的破坏。</p><p>程序状态字（PSW）寄存器中有一位表示处理机的执行状态。当用户程序在需要系统服务而调用系统调用时，处理机的执行状态设置为核心态；当调用完成后，处理机的执行状态又会被重置为用户态。</p><h3 id="内核与原语"><a href="#内核与原语" class="headerlink" title="内核与原语"></a>内核与原语</h3><p>操作系统采用层次结构，将操作系统分为若干个层次，每一层完成操作系统的一部分功能。<br>为了提高操作系统的运行效率，通常把一些与硬件紧密相关的模块放在仅靠硬件的层次上，并且常驻内存。这个部分被称为操作系统的内核。<br>内核是计算机硬件上扩充的第一层软件，操作系统需要对这部分软件进行保护。内核是使用原语实现的。<br>原语是由若干指令构成的，是用于完成一定功能的过程，但是原语是原子操作构成的，是一个不可分割的、不可中断操作。</p><p>在不同的操作系统中，内核的作用不尽相同，但是都包括以下三个基本功能：</p><ul><li>时钟管理：操作系统中许多活动都需要时钟。在分时系统基于时间片的进程调度中，每当时间片用完时，需要时钟管理产生终端信号，才能够重新调度进程。在实时操作系统中，截止时间的控制也需要时钟管理程序的控制。</li><li>中断处理：终端时操作系统赖以活动的基础，各种类型的系统调用的实现、进程调度、设备操作完成等都需要通过中断的方法通知处理机。</li><li>原语操作：原语操作可以完成操作系统中的一些基本功能，如进程控制、进程同步及常用的进程通信手段等。</li></ul><h3 id="进程家族树"><a href="#进程家族树" class="headerlink" title="进程家族树"></a>进程家族树</h3><p>进程控制的职责是对系统中的全部进程实行有效管理，其主要表现在对一个进程进行创建、撤销以及进程状态的转换控制。通常允许一个进程创建和控制另一个进程，前者称之为父进程，后者称之为子进程，以此类推可以得到一个进程的家族树。家族关系在PCB中有明确体现。</p><img src="/images/操作系统/3进程与线程/8.进程家族树.png" alt="进程家族树" style="zoom: 60%"><h2 id="进程的创建和撤销"><a href="#进程的创建和撤销" class="headerlink" title="进程的创建和撤销"></a>进程的创建和撤销</h2><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>引起创建进程的事件：</p><ul><li>用户登录：在分时操作系统中，当有用户登录后，就为该用户建立一个进程，并把它投入到就绪队列。</li><li>新作业进入系统：当新的作业进入系统时，操作系统需要为之分配资源并创建进程。</li><li>提供服务：当运行状态的用户进程提出某种请求后，系统会专门创建一个进程来提供用户所需要的服务（例如打印服务请求）。</li><li>应用请求：用户进程需要在自己的应用进程中创建子进程。</li></ul><p>创建原语需要做的工作：</p><ol><li>申请空白PCB。将创建者提供的有关信息填入PCB。</li><li>初始化进程描述信息。将进程名、进程标识符、建立父子关系、填写进程所属组、初始化处理机状态信息、初始化进程控制信息、分配初始优先级。</li><li>为进程分配资源、存储空间。子进程的资源可以从父进程中继承；若进程的程序不在内存中，则应将其从外存调入内存，并将有关信息填入PCB。</li><li>将新进程插入到就绪队列，等待调度。</li></ol><h3 id="进程的撤销"><a href="#进程的撤销" class="headerlink" title="进程的撤销"></a>进程的撤销</h3><p>引起进程撤销的事件：</p><ul><li>进程正常结束。</li><li>进程异常结束。</li><li>外界干预，由进程意外的事件引起的进程终止（例如人为干预、父进程要求、父进程撤销等）。</li></ul><p>撤销原语需要做的工作：</p><ol><li>查找撤销进程的PCB。</li><li>若进程处于运行状态，予以终止，并进行调度，重新挑选其他进程运行。</li><li>若进程有子进程，予以终止，递归处理。防止进程脱离家族而无法控制。</li><li>归还资源。</li><li>从所在队列中移出。</li></ol><h2 id="进程的阻塞和唤醒"><a href="#进程的阻塞和唤醒" class="headerlink" title="进程的阻塞和唤醒"></a>进程的阻塞和唤醒</h2><p>在进程执行过程中，常常会因为等待I&#x2F;O操作完成或等待某个事件出现而进入阻塞状态。当事件完成后，进程会被唤醒进入就绪状态。</p><h3 id="进程的阻塞与唤醒的事件"><a href="#进程的阻塞与唤醒的事件" class="headerlink" title="进程的阻塞与唤醒的事件"></a>进程的阻塞与唤醒的事件</h3><ul><li>请求系统服务，完成后唤醒。如请求打印机等。</li><li>启动某种操作，完成后唤醒。如启动某个输入设备，只有当进程完成数据的输入之后，才能继续执行。</li><li>新数据尚未到达，到达后唤醒。对于相互合作的进程，如果一个进程需要另一个进程的数据，而没能及时提供时，则会等待进程完成数据的提供。</li><li>无新工作可做，有新任务分配后唤醒。</li></ul><h3 id="阻塞原语需要做的的工作"><a href="#阻塞原语需要做的的工作" class="headerlink" title="阻塞原语需要做的的工作"></a>阻塞原语需要做的的工作</h3><ol><li>停止进程的执行。</li><li>修改PCB中进程的状态标识，将进程插入阻塞队。</li><li>重新调度，挑选一个就绪的进程投入运行，并进行切换。</li></ol><h3 id="唤醒原语需要做的工作"><a href="#唤醒原语需要做的工作" class="headerlink" title="唤醒原语需要做的工作"></a>唤醒原语需要做的工作</h3><ol><li>将进程从阻塞队列解下。</li><li>把进程插入就绪队列。</li><li>改变进程PCB中的状态。</li></ol><h2 id="进程的挂起与激活"><a href="#进程的挂起与激活" class="headerlink" title="进程的挂起与激活"></a>进程的挂起与激活</h2><h3 id="挂起原语要做的工作"><a href="#挂起原语要做的工作" class="headerlink" title="挂起原语要做的工作"></a>挂起原语要做的工作</h3><ol><li>检查被挂起进程的状态。</li><li>若处于就绪状态，将进程由就绪状态变为就绪挂起状态。</li><li>若处于阻塞状态，将进程由阻塞状态变为阻塞挂起状态。</li><li>若处于运行状态，将进程由运行状态变为就绪挂起状态，并调用进程调度程序重新调度。</li></ol><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><h3 id="线程的引入"><a href="#线程的引入" class="headerlink" title="线程的引入"></a>线程的引入</h3><p>进程是一个可以拥有资源的独立单位，进程是一个可以独立调度和分派的基本单位。<br>由于进程是资源的拥有者，因此在进程的创建、撤销和切换中系统必须为之付出较大的时间、空间开销。所以系统中所设置的进程的数目不宜过多，进程切换的频率不宜过高。这就限制了进程并发程度的提高。</p><p>为了提高系统并发执行的程度，进一步提高系统的吞吐量，在20世纪80年代提出了线程的概念。<br>通过引入线程实现多线程，可以具有以下优点：</p><ul><li>响应度高：在交互式程序中，部分线程可以阻塞或执行较冗长的操作，另一部分线程继续执行，保证用户的响应时间</li><li>资源共享：同一个进程的多个线程共享进程拥有的内存和资源</li><li>经济：线程的创建和切换比进程更为经济</li></ul><p>线程是进程的一个实体，是被独立调度和分派的基本单位，表示进程中的一个控制点，执行一系列指令。</p><img src="/images/操作系统/3进程与线程/9.进程线程关系.png" alt="进程线程关系" style="zoom: 60%"><h3 id="线程的组成"><a href="#线程的组成" class="headerlink" title="线程的组成"></a>线程的组成</h3><p>线程有时会被称为轻型进程(Light Weight Process, LWP)，每个线程都有自己的线程控制块(Thread Control Block, TCB)。</p><p>TCB主要包括：</p><ul><li>线程标识符。</li><li>描述处理机状态信息的一组寄存器。包括通用寄存器、指令计数器、程序状态字等。</li><li>栈指针。每个线程都有用户栈和核心栈两个栈。当在用户态下运行时使用用户栈、在核心态下运行使用核心栈。</li><li>一个私有的存储区。用于存放现场保护信息和其他与该线程相关的统计信息。</li></ul><img src="/images/操作系统/3进程与线程/10.进程和线程的比较.png" alt="进程和线程的比较" style="zoom: 60%"><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>线程是一个动态过程，在一定条件下可以转换自己的状态。<br>通常，创建一个进程时，其主线程也会被创建，其他线程由主线程创建，，并提供对占空间，将新线程投入就绪队列。</p><p>当CPU空闲时，线程调度程序会从就绪队列中选择</p><p>操作系统上一篇：<a href="/p/20220513/" target="_blank">操作系统概述</a><br>操作系统下一篇：进程同步与通信</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac(m1)奇葩问题解决</title>
      <link href="/p/20220605/"/>
      <url>/p/20220605/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-报错"><a href="#Node-报错" class="headerlink" title="Node 报错"></a>Node 报错</h1><p>重现方法：Node12运行vue工程<br>报错日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/npm run dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vue-manage-system@5.1.0 dev /Users/zhinushannan/code/wanxiao_reported/vue-manage-system</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vite</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;--- Last few GCs ---&gt;</span><br><span class="line"></span><br><span class="line">[38157:0x120008000]       45 ms: Scavenge 9.6 (11.8) -&gt; 9.3 (14.6) MB, 0.3 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure</span><br><span class="line">[38157:0x120008000]       53 ms: Scavenge 11.4 (14.6) -&gt; 10.8 (19.6) MB, 0.4 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure</span><br><span class="line">[38157:0x120008000]       84 ms: Scavenge 14.9 (20.4) -&gt; 13.3 (21.4) MB, 0.6 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;--- JS stacktrace ---&gt;</span><br><span class="line"></span><br><span class="line">FATAL ERROR: wasm code commit Allocation failed - process out of memory</span><br><span class="line">1: 0x10485bf24 node::Abort() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">2: 0x10485c088 node::OnFatalError(char const*, char const*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">3: 0x104984754 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">4: 0x1049846d4 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">5: 0x104eeb1d4 v8::internal::wasm::WasmCodeManager::TryAllocate(unsigned long, void*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">6: 0x104eebfe0 v8::internal::wasm::NativeModule::CreateEmptyJumpTableInRegion(unsigned int, v8::base::AddressRegion) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">7: 0x104eeb49c v8::internal::wasm::NativeModule::AddCodeSpace(v8::base::AddressRegion) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">8: 0x104eebe28 v8::internal::wasm::NativeModule::NativeModule(v8::internal::wasm::WasmEngine*, v8::internal::wasm::WasmFeatures const&amp;, bool, v8::internal::VirtualMemory, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;, std::__1::shared_ptr&lt;v8::internal::Counters&gt;, std::__1::shared_ptr&lt;v8::internal::wasm::NativeModule&gt;*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">9: 0x104eee39c v8::internal::wasm::WasmCodeManager::NewNativeModule(v8::internal::wasm::WasmEngine*, v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&amp;, unsigned long, bool, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">10: 0x104ef4c88 v8::internal::wasm::WasmEngine::NewNativeModule(v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&amp;, unsigned long, bool, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">11: 0x104ef4bcc v8::internal::wasm::WasmEngine::NewNativeModule(v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&amp;, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">12: 0x104ecc36c v8::internal::wasm::AsyncCompileJob::CreateNativeModule(std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">13: 0x104ed55d0 v8::internal::wasm::AsyncCompileJob::PrepareAndStartCompile::RunInForeground(v8::internal::wasm::AsyncCompileJob*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">14: 0x104ed5e4c v8::internal::wasm::AsyncCompileJob::CompileTask::RunInternal() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">15: 0x1048bdfbc node::PerIsolatePlatformData::RunForegroundTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete&lt;v8::Task&gt; &gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">16: 0x1048bd064 node::PerIsolatePlatformData::FlushForegroundTasksInternal() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">17: 0x105051acc uv__async_io [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">18: 0x105063d80 uv__io_poll [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">19: 0x105051f74 uv_run [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">20: 0x104898854 node::NodeMainInstance::Run() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">21: 0x10483514c node::Start(int, char**) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">22: 0x1075c908c</span><br><span class="line"></span><br><span class="line">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></pre></td></tr></table></figure><p>错误原因：Node12无法完全支持m1版本的Mac<br>解决方案：更换已修复的版本，如14.17.1、15等。</p><h1 id="Docker拉取Mysql镜像报no-matching…"><a href="#Docker拉取Mysql镜像报no-matching…" class="headerlink" title="Docker拉取Mysql镜像报no matching…"></a>Docker拉取Mysql镜像报no matching…</h1><p>重现方法：执行<code>docker pull mysql:8.0.27</code><br>日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull mysql:8.0.27</span></span><br><span class="line">8.0.27: Pulling from library/mysql</span><br><span class="line">8.0.27: Pulling from library/mysql</span><br><span class="line">8.0.27: Pulling from library/mysql</span><br><span class="line">no matching manifest for linux/arm64/v8 in the manifest list entries</span><br></pre></td></tr></table></figure><p>原因：M1芯片是arm64架构，也称作aarch64架构，只能运行arm64&#x2F;aarch64架构的程序。<br>解决方案：添加参数后拉取：<code>docker pull --platform linux/x86_64 mysql</code></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> Mac </tag>
            
            <tag> m1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac(m1)安装配置Java/Python/Node/Git/Hadoop/Scala/Spark/Docker</title>
      <link href="/p/20220604/"/>
      <url>/p/20220604/</url>
      
        <content type="html"><![CDATA[<h1 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h1><p>进入<code>~/</code>目录，查看是否存在<code>.bash_profile</code>文件，若不存在，则创建，在最后添加<code>export PATH</code>。<br>修改<code>~/.zshrc</code>文件，在最后一行添加<code>source ~/.bash_profile</code>。</p><p>解释：<br>在配置环境变量中，我们通常编辑<code>/etc/profile</code>，但是这是系统级别的文件，最好的方式是编辑用户级别的配置文件，即<code>~/.bash_profile</code>，但是在Mac中，开启终端时加载的是<code>~/.zshrc</code>，所以需要在<code>~/.zshrc</code>最后一行添加一条编译<code>~/.bash_profile</code>的命令，即<code>source ~/.bash_profile</code>。</p><p>而配置完环境变量之后，需要将环境变量暴露，所以需要在<code>.bash_profile</code>的最后，将PATH暴露，即<code>export PATH</code>。</p><p>当然也可以直接写在<code>~/.zshrc</code>中。</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>前往Oracle官网下载JDK：<a href="https://www.oracle.com/java/technologies/downloads/">官网</a><br><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1.oracle%E5%AE%98%E7%BD%91.png" alt="oracle官网"></p><p>下载完成之后直接一路傻瓜式安装。安装完成之后就可以使用<code>java``javac``java -version</code>等命令了。<br>正常情况下，安装完成后JDK的目录在<code>/Library/Java/JavaVirtualMachines/jdkXXX.jdk/Contents/Home</code>（其中XXX是JDK的版本号）下，编辑<code>~/.bash_profile</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_333.jdk/Contents/Home</span><br><span class="line">CLASS_PATH=&quot;$JAVA_HOME/lib&quot;</span><br><span class="line">PATH=&quot;.$PATH:$JAVA_HOME/bin&quot;</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line">export PATH</span><br><span class="line">export CLASS_PATH</span><br></pre></td></tr></table></figure><p>然后执行<code>source ~/.bash_profile</code>即可。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>前往官网下载自己需要的版本：<a href="https://www.python.org/downloads/">官网</a></p><p>下载完成后一路傻瓜式安装即可。<br>通常Python的安装目录在<code>/Library/Frameworks/Python.framework/Versions/3.9/</code>（其中3.9是安装的版本号）下，进入<code>bin</code>目录，找到对应的Python可执行文件，并配置环境变量：<br><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/2.%E5%AF%BB%E6%89%BEpython%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6.png" alt="Python可执行文件"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin:$&#123;PATH&#125;&quot;</span><br><span class="line">alias python39=&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9&quot;</span><br><span class="line">alias pip39=&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3.9&quot;</span><br></pre></td></tr></table></figure><p>执行<code>source ~/.bash_profile</code>，并执行<code>python39 -V</code>和<code>pip39 -V</code>检查是否可用。</p><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><p>使用<code>nvm</code>工具安装nodejs。<br>执行下面任意一条命令即可安装<code>nvm</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br></pre></td></tr></table></figure><p>在<code>~/.bash_profile</code>中配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nvm (安装node的工具)</span></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nvm 国内镜像</span></span><br><span class="line">export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br><span class="line">export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs</span><br></pre></td></tr></table></figure><p>执行<code>source ~/.bash_profile</code>，然后就可以通过nvm工具安装nodejs了，常用命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote # 列出所有可用版本</span><br><span class="line">nvm install &lt;version&gt; # 安装指定版本</span><br><span class="line">nvm uninstall &lt;version&gt; # 卸载指定版本</span><br><span class="line">nvm ls # 列出所有安装版本</span><br><span class="line">nvm use &lt;version&gt; # 切换使用指定的版本</span><br><span class="line">nvm current # 显示当前使用的版本</span><br><span class="line">nvm alias default &lt;version&gt; # 设置默认的node版本</span><br><span class="line">nvm deactivate # 解除当前版本绑定</span><br></pre></td></tr></table></figure><p>使用nvm工具安装的node，其目录在<code>~/.nvm/versions/node/</code>。</p><p>执行<code>nvm install 12</code>，等待安装完成后，执行<code>node -v</code>和<code>npm -v</code>检查是否可用。</p><p>但是在后续运行vue项目的时候发现了如下报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/npm run dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vue-manage-system@5.1.0 dev /Users/zhinushannan/code/wanxiao_reported/vue-manage-system</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vite</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;--- Last few GCs ---&gt;</span><br><span class="line"></span><br><span class="line">[38157:0x120008000]       45 ms: Scavenge 9.6 (11.8) -&gt; 9.3 (14.6) MB, 0.3 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure</span><br><span class="line">[38157:0x120008000]       53 ms: Scavenge 11.4 (14.6) -&gt; 10.8 (19.6) MB, 0.4 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure</span><br><span class="line">[38157:0x120008000]       84 ms: Scavenge 14.9 (20.4) -&gt; 13.3 (21.4) MB, 0.6 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;--- JS stacktrace ---&gt;</span><br><span class="line"></span><br><span class="line">FATAL ERROR: wasm code commit Allocation failed - process out of memory</span><br><span class="line">1: 0x10485bf24 node::Abort() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">2: 0x10485c088 node::OnFatalError(char const*, char const*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">3: 0x104984754 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">4: 0x1049846d4 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">5: 0x104eeb1d4 v8::internal::wasm::WasmCodeManager::TryAllocate(unsigned long, void*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">6: 0x104eebfe0 v8::internal::wasm::NativeModule::CreateEmptyJumpTableInRegion(unsigned int, v8::base::AddressRegion) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">7: 0x104eeb49c v8::internal::wasm::NativeModule::AddCodeSpace(v8::base::AddressRegion) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">8: 0x104eebe28 v8::internal::wasm::NativeModule::NativeModule(v8::internal::wasm::WasmEngine*, v8::internal::wasm::WasmFeatures const&amp;, bool, v8::internal::VirtualMemory, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;, std::__1::shared_ptr&lt;v8::internal::Counters&gt;, std::__1::shared_ptr&lt;v8::internal::wasm::NativeModule&gt;*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">9: 0x104eee39c v8::internal::wasm::WasmCodeManager::NewNativeModule(v8::internal::wasm::WasmEngine*, v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&amp;, unsigned long, bool, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">10: 0x104ef4c88 v8::internal::wasm::WasmEngine::NewNativeModule(v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&amp;, unsigned long, bool, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">11: 0x104ef4bcc v8::internal::wasm::WasmEngine::NewNativeModule(v8::internal::Isolate*, v8::internal::wasm::WasmFeatures const&amp;, std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">12: 0x104ecc36c v8::internal::wasm::AsyncCompileJob::CreateNativeModule(std::__1::shared_ptr&lt;v8::internal::wasm::WasmModule const&gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">13: 0x104ed55d0 v8::internal::wasm::AsyncCompileJob::PrepareAndStartCompile::RunInForeground(v8::internal::wasm::AsyncCompileJob*) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">14: 0x104ed5e4c v8::internal::wasm::AsyncCompileJob::CompileTask::RunInternal() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">15: 0x1048bdfbc node::PerIsolatePlatformData::RunForegroundTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete&lt;v8::Task&gt; &gt;) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">16: 0x1048bd064 node::PerIsolatePlatformData::FlushForegroundTasksInternal() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">17: 0x105051acc uv__async_io [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">18: 0x105063d80 uv__io_poll [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">19: 0x105051f74 uv_run [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">20: 0x104898854 node::NodeMainInstance::Run() [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">21: 0x10483514c node::Start(int, char**) [/Users/zhinushannan/.nvm/versions/node/v12.22.12/bin/node]</span><br><span class="line">22: 0x1075c908c</span><br><span class="line"></span><br><span class="line">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></pre></td></tr></table></figure><p>其原因是Node在新款的 Mac 的 M1 macOS 系统运行的不是很好，可以通过安装已经修复的版本来运行，如14.17.1、15等。</p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>Mac自带git，不需要额外安装。<br>首先查看本地git是否已经配置，执行<code>git config --global --list</code>命令，如果没配置，则执行以下命令进行配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github的用户名&quot;</span><br><span class="line">git config --global user.email &quot;github的邮箱&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;github的邮箱&quot; # 执行此条命令后需要连续按三次回车</span><br><span class="line">cat ~/.ssh/id_rsa.pub # 查看公钥</span><br></pre></td></tr></table></figure><p>在GitHub的<code>https://github.com/settings/keys</code>中新建<code>SSH KEY</code>，将公钥复制进去，保存后，执行<code>ssh -T git@github.com</code>命令，若出现<code>success</code>字样，则说明配置成功！</p><h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><p>首先去Hadoop官网下载需要版本的二进制包：<a href="https://hadoop.apache.org/releases.html">官网</a>（或者也可以去国内镜像下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/stable/">清华镜像</a>）<br><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/3.Hadoop%E5%AE%98%E7%BD%91.png" alt="Hadoop官网"></p><p>下载完成后解压到指定目录，我设置的目录是<code>~/environment</code>，然后将hadoop的目录配置到<code>~/.bash_profile</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/Users/zhinushannan/environment/hadoop-3.3.3</span><br><span class="line">export HADOOP_INSTALL=$HADOOP_HOME</span><br><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class="line">export YARN_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class="line">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure><p>执行<code>source ~/.bash_profile</code>，执行<code>hadoop</code>命令检查是否可用。</p><h1 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h1><p>进入Scala官网：<a href="https://www.scala-lang.org/download/">官网</a><br>下载第二代版本的二进制包：<br><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/4.scala%E5%AE%98%E7%BD%91.png" alt="scala官网"></p><p><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/5.scala%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85.png" alt="下载二进制包"></p><p>下载完成后解压到指定目录，我设置的目录是<code>~/environment</code>，然后将scala的目录配置到<code>~/.bash_profile</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;/Users/zhinushannan/environment/scala-2.12.15/bin:$&#123;PATH&#125;&quot;</span><br></pre></td></tr></table></figure><p>执行<code>source ~/.bash_profile</code>，执行<code>scala</code>命令检查是否可用。</p><h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><p>进入Spark官网，根据安装的Hadoop版本选择Spark版本：<a href="https://spark.apache.org/downloads.html">官网</a><br><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/6.Spark%E5%AE%98%E7%BD%91.png" alt="Spark官网"></p><p>下载完成后解压到指定目录，我设置的目录是<code>~/environment</code>，然后将scala的目录配置到<code>~/.bash_profile</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/Users/zhinushannan/environment/spark-3.2.1-bin-hadoop3.2</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin</span><br><span class="line">export PYSPARK_PYTHON=python39</span><br></pre></td></tr></table></figure><p>其中python39是自己的python启动命令。</p><p>安装pyspark：<code>pip39 install pyspark</code>，执行<code>source ~/.bash_profile</code>，执行<code>pyspark</code>检查是否可用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &#x27;_/</span><br><span class="line">   /__ / .__/\_,_/_/ /_/\_\   version 3.2.1</span><br><span class="line">      /_/</span><br></pre></td></tr></table></figure><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>前往官网下载：<a href="https://docs.docker.com/desktop/mac/install/">官网</a>，下载完成后将dmg文件拖入Application进行安装，安装完成后点击Docker图标运行Docker。</p><p><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/7.docker.png" alt="docker"></p><p>点击小鲸鱼图标，在Perferences中设置国内镜像：<br><img src="/images/%E5%B7%A5%E5%85%B7/mac/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/8.docker%E9%95%9C%E5%83%8F.png" alt="docker镜像"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;builder&quot;: &#123;</span><br><span class="line">    &quot;gc&quot;: &#123;</span><br><span class="line">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class="line">      &quot;enabled&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;experimental&quot;: false,</span><br><span class="line">  &quot;features&quot;: &#123;</span><br><span class="line">    &quot;buildkit&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>Apply &amp; Restart</code>镜像源生效。</p><p>但是，此时是不能ping通Docker容器的，即无法与容器建立通信。如果有这个需求，需要做如下操作（提前安装好brew）。<br>安装<code>docker-connector</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">brew install wenjunxiao/brew/docker-connector</span><br><span class="line">==&gt; Downloading https://github.com/wenjunxiao/mac-docker-connector/releases/download/v3.1/docker-connector-darwin.tar.gz</span><br><span class="line">==&gt; Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/266031479/3f51cb4b-e37f-4f12-a492-5d057728562c?X-Amz-Algorithm=AWS4-HMAC-SHA25</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Installing docker-connector from wenjunxiao/brew</span><br><span class="line">==&gt; Caveats</span><br><span class="line">For the first time, you can add all the bridge networks of docker to the routing table by the following command:</span><br><span class="line">  docker network ls --filter driver=bridge --format &quot;&#123;&#123;.ID&#125;&#125;&quot; | xargs docker network inspect --format &quot;route &#123;&#123;range .IPAM.Config&#125;&#125;&#123;&#123;.Subnet&#125;&#125;&#123;&#123;end&#125;&#125;&quot; &gt;&gt; /opt/homebrew/etc/docker-connector.conf</span><br><span class="line">Or add the route of network you want to access to following config file at any time:</span><br><span class="line">  /opt/homebrew/etc/docker-connector.conf</span><br><span class="line">Route format is `route subnet`, such as:</span><br><span class="line">  route 172.17.0.0/16</span><br><span class="line">The route modification will take effect immediately without restarting the service.</span><br><span class="line">You can also expose you docker container to other by follow settings in /opt/homebrew/etc/docker-connector.conf:</span><br><span class="line">  expose 0.0.0.0:2512</span><br><span class="line">  route 172.17.0.0/16 expose</span><br><span class="line">Let the two subnets access each other through iptables:</span><br><span class="line">  iptables 172.17.0.0+172.18.0.0</span><br><span class="line"></span><br><span class="line">To start wenjunxiao/brew/docker-connector now and restart at startup:</span><br><span class="line">  sudo brew services start wenjunxiao/brew/docker-connector</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  sudo docker-connector -config /opt/homebrew/etc/docker-connector.conf</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /opt/homebrew/Cellar/docker-connector/3.1: 4 files, 5.3MB, built in 1 second</span><br><span class="line">==&gt; Running `brew cleanup docker-connector`...</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在日志中，可以看到<code>docker-connector</code>的配置文件在<code>/opt/homebrew/etc/docker-connector.conf</code>。确定自己电脑上的docker属于哪一个路由段（通常情况下是<code>172.17.0.1</code>），将对应的路由的注视去掉。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">addr 192.168.251.1/24</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mtu 1400</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">host 127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">port 2511</span></span><br><span class="line">route 172.17.0.0/16</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">route 172.18.0.0/16</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iptables 172.17.0.0+172.18.0.0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hosts /etc/hosts .<span class="built_in">local</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">proxy 127.0.0.1:80:80</span></span><br></pre></td></tr></table></figure><p>启动<code>docker-connector</code>服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew services start docker-connector</span><br></pre></td></tr></table></figure><p>运行docker前端容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --restart always --net host --cap-add NET_ADMIN --name connector wenjunxiao/mac-docker-connector</span><br></pre></td></tr></table></figure><p>此时就可以尝试与容器建立通信。</p><p><code>docker-connector</code>官方：<a href="https://github.com/wenjunxiao/mac-docker-connector">https://github.com/wenjunxiao/mac-docker-connector</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> Mac </tag>
            
            <tag> m1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker网络（未完成）</title>
      <link href="/p/20220529/"/>
      <url>/p/20220529/</url>
      
        <content type="html"><![CDATA[<p>Docker上一篇：<a href="/p/20220507/" target="_blank">Dockerfile暴力入门</a><br>Docker下一篇：</p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><p>在一台安装Docker的Linux机器上执行<code>ifconfig</code>命令，可以发现出现一个名为<code>docker0</code>的虚拟网桥：<br><img src="/images/运维/Docker/3-1Docker0.png" alt="Docker0.png" style="zoom: 65%"></p><h1 id="Docker网络常用命令"><a href="#Docker网络常用命令" class="headerlink" title="Docker网络常用命令"></a>Docker网络常用命令</h1><p>查看Docker网络命令的帮助<code>docker network --help</code>：<br><img src="/images/运维/Docker/3-2帮助命令.png" alt="帮助命令.png" style="zoom: 50%"></p><p>查看Docker网络模式列表<code>docker network ls</code>：<br><img src="/images/运维/Docker/3-3网络列表.png" alt="网络列表.png" style="zoom: 65%"></p><p>查看网络源数据<code>docker network inspect [network_name]</code><br>删除网络<code>docker network rm [network_name]</code><br>查看容器的网络<code>docker inspect [container_name]</code></p><h1 id="Docker网络的作用"><a href="#Docker网络的作用" class="headerlink" title="Docker网络的作用"></a>Docker网络的作用</h1><ol><li>用于实现容器间的互联和通信以及端口映射</li><li>容器IP变动时，可以通过服务名连接（类似于SpringCloud的服务名）</li></ol><h1 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h1><table><thead><tr><th align="center">网络模式</th><th align="center">简介</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">bridge</td><td align="center">为每一个容器分配、设置IP等，并将容器连接到<code>docker0</code>虚拟网桥。默认为该模式。</td><td align="center"><code>--network bridge</code></td></tr><tr><td align="center">host</td><td align="center">容器将不再虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口</td><td align="center"><code>--network host</code></td></tr><tr><td align="center">none</td><td align="center">容器有独立的Network namespace，但并没有对齐进行任何网络设置，如分配veth pair和网桥连接、IP等。</td><td align="center"><code>--network none</code></td></tr><tr><td align="center">container</td><td align="center">新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口范围等。</td><td align="center"><code>--network container:NAME</code></td></tr></tbody></table><h2 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h2><p>Docker服务默认会创建一个<code>docker0</code>网桥，该桥接网络的名称为docker0，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。Docker默认指定了<code>docker0</code>接口的IP地址和子网掩码，让主机和容器之间可以通过网桥相互通信。</p><p>在启动一个容器时，如果没有指定network的话默认使用的网桥模式就是<code>bridge</code>，使用的就是<code>docker0</code>。</p><img src="/images/运维/Docker/3-1Docker0.png" alt="Docker0.png" style="zoom: 65%"><blockquote><p>网桥docker0创建一对对等虚拟设备接口一个叫veth，另一个叫eth0，成对匹配。<br>整个宿主机的网桥模式都是docker0，类似一个交换机有一堆接口，每个接口叫veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）<br>每个容器实例内部也有一块网卡，每个接口叫eth0；<br>docker0上面的每个veth匹配某个容器实例内部的eth0，两两配对，一一匹配。</p></blockquote><p>Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。</p><p>容器之间互相访问时，以<code>docker0</code>为网关；当宿主机与容器之间访问时，以<code>docker0</code>为网关。</p><p><img src="/images/%E8%BF%90%E7%BB%B4/Docker/3-4bridge.png" alt="bridge.png"></p><p>在宿主机运行一个<code>centos_ssh:7</code>的容器（<a href="/p/20220507/#%E6%9E%84%E5%BB%BA%E5%8F%AF%E4%BB%A5ssh%E7%99%BB%E5%BD%95%E7%9A%84centos7" target="_blank">构建可以ssh登录的centos7</a>），在容器内执行<code>ip addr</code>（如果提示找不到命令，请安装<code>initscripts</code>）：<br><img src="/images/运维/Docker/3-5container-ip_addr.png" alt="container-ip_addr.png" style="zoom: 65%"><br>可以看到有一个<code>24: eth0@if25</code>，在宿主机执行<code>ip addr</code>，则将会看到有一个<code>25: vethadb701b@if24</code>：<br><img src="/images/运维/Docker/3-6master-ip_addr.png" alt="master-ip_addr.png" style="zoom: 65%"><br>这就是上述的<code>eth0</code>和<code>veth</code>。</p><h2 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h2><p>host模式是指直接使用宿主机的IP地址与外界进行通信，不再需要额外进行NAT转换。在这种模式下，容器将不会虚拟出自己的网卡，而是使用宿主机的IP和端口。</p><img src="/images/运维/Docker/3-7host模式.png" alt="host模式.png" style="zoom: 65%"><p>命令：<code>docker run -d --network host --name [container_name] [image]</code>（不需要指定端口）</p><h2 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h2><p>禁用网络功能，可以理解为不与外界有网络连接，且没有网卡。网络只有<code>lo</code>标识，即<code>127.0.0.1</code>。</p><p>命令：<code>docker run -d -p [master_port]:[container_port] --network none --name [container_name] [image]</code></p><h2 id="container模式"><a href="#container模式" class="headerlink" title="container模式"></a>container模式</h2><p>新建的容器和已经存在的一个容器共享一个网络ip配置而不是和宿主机共享。<br>新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。</p><img src="/images/运维/Docker/3-8container模式.png" alt="container模式.png" style="zoom: 65%"><p>命令：<code>docker run -d -p [master_port]:[new_container_port] --network container:[net_container_name] --name [new_container_name] [image]</code>。</p><p>如果<code>net_container</code>挂掉了，则<code>new_container</code>的网络模式会变成<code>none</code>模式。</p><h2 id="自定义模式"><a href="#自定义模式" class="headerlink" title="自定义模式"></a>自定义模式</h2><p>Docker上一篇：<a href="/p/20220507/" target="_blank">Dockerfile暴力入门</a><br>Docker下一篇：</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Docker </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概述</title>
      <link href="/p/20220513/"/>
      <url>/p/20220513/</url>
      
        <content type="html"><![CDATA[<p>操作系统上一篇：<a href="/p/20220512/" target="_blank">计算机系统概述</a><br>操作系统下一篇：<a href="/p/20220609/" target="_blank">进程与线程</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li><p><strong>从资源管理的观点：</strong>操作系统是一个程序集合，是用于控制和管理计算机的软硬件资源、合理地组织计算机的工作流程、方便用户的程序集合。</p></li><li><p><strong>从用户的观点：</strong>操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的第一次扩充。</p></li><li><p><strong>操作系统的地位：</strong>紧贴硬件（裸机）之上，所有其他软件之下。</p></li></ul><h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><blockquote><p>在以下的讨论中，需要拥有这样两个观念：计算机的工作效率远远大于人；IO操作是人来完成的，即IO的速度等于人的速度。</p></blockquote><h2 id="1946年-第一代计算机-没有操作系统"><a href="#1946年-第一代计算机-没有操作系统" class="headerlink" title="1946年 第一代计算机 - 没有操作系统"></a>1946年 第一代计算机 - 没有操作系统</h2><p>在第一代计算机上没有操作系统，对计算机的操作完全是人工操作方式，这种人工操作方式有两个缺点：</p><ul><li>用户完全独占计算机。也就是说，计算机的全部资源只供一个用户使用。</li><li>计算机等待人工操作。当用户操作时计算机要等待，CPU空闲。</li></ul><h2 id="1958年-第二代计算机-监控系统"><a href="#1958年-第二代计算机-监控系统" class="headerlink" title="1958年 第二代计算机 - 监控系统"></a>1958年 第二代计算机 - 监控系统</h2><p>第二代计算机主要用于科学和工程计算，程序大多用<code>FORTRAN</code>语言书写，该语言适用于作数值运算。<br>当时主机上用的控制程序称之为监控程序（Monitor），其功能相对比较简单，监控程序是操作系统的雏形 。</p><h3 id="单道批处理系统（Simple-Batch-System）"><a href="#单道批处理系统（Simple-Batch-System）" class="headerlink" title="单道批处理系统（Simple Batch System）"></a>单道批处理系统（Simple Batch System）</h3><p>单道批处理系统由两台机器组成，用一台价格较低的机器作为<strong>输入&#x2F;输出机</strong>，用一台正常的机器用于运算作为<strong>主机</strong>。<br>将所有的作业用<strong>为输入&#x2F;输出机</strong>输入到磁带上，用<strong>主机</strong>进行运算。<br>大批的作业在<strong>输入&#x2F;输出机</strong>的控制下输入到磁带后，用一个特殊的程序来控制作业的读入和运行，这个特殊的程序叫作业控制语言（JCL，Job Control Language）书写，它能控制程序的运行。</p><p>单道批处理系统使用的是<strong>脱机输入&#x2F;输出技术</strong>，即程序和数据的<strong>输入</strong>都不是在主机的控制之下，而是在一台专门作输入&#x2F;输出的计算机的控制之下进行；换句话说，输入&#x2F;输出工作是在脱离主机的情况之下进行的，故称为脱机输入&#x2F;输出（Off Line I&#x2F;O）。</p><img src="/images/操作系统/2操作系统概述/2.脱机输入输出技术.png" style="zoom: 50%;" alt="脱机输入输出技术"><blockquote><p>意义：</p><ol><li>使用脱机输入&#x2F;输出技术，不占用主机的时间，可以减少CPU的空闲时间。</li><li>提高了输入输出的速度。当CPU需要数据时，直接从磁带机上输入，不需要从低速的I&#x2F;O设备商输入，缓解了CPU与IO设备速度不匹配之间的矛盾。</li></ol></blockquote><h2 id="1964年-第三代计算机-极大发展"><a href="#1964年-第三代计算机-极大发展" class="headerlink" title="1964年 第三代计算机 - 极大发展"></a>1964年 第三代计算机 - 极大发展</h2><p>20世纪60年代中期，产生了多道程序设计。<br>其核心思想是：把多个程序同时放入内存，使他们共享系统中的资源。</p><p>对于单道程序设计，内存中只存在一个程序，当该程序在运行中发出IO请求时，CPU就会处在空闲状态，等待程序IO结束。<br>而在多道程序设计中，由于内存中存在多个程序，当一个程序发出IO请求时，系统可调度使另一程序运行，使CPU始终处于忙碌状态，提高效率。</p><img src="/images/操作系统/2操作系统概述/3.多道程序设计.png" style="zoom: 50%;" alt="多道程序设计"><h2 id="1974年-第四代计算机-多元化发展"><a href="#1974年-第四代计算机-多元化发展" class="headerlink" title="1974年 第四代计算机 - 多元化发展"></a>1974年 第四代计算机 - 多元化发展</h2><p>随着大规模集成电路（在每平方厘米的芯片上集成数千个晶体管）的发展，计算机向着微型化、网络化和智能化的方向发展。个人计算机的时代到来了。个人计算机连接成了网络。因此运行其上的网络操作系统和分布式操作系统就开始崛起。</p><h2 id="操作系统发展的因素——速度不匹配的矛盾"><a href="#操作系统发展的因素——速度不匹配的矛盾" class="headerlink" title="操作系统发展的因素——速度不匹配的矛盾"></a>操作系统发展的因素——速度不匹配的矛盾</h2><p><strong>主机与外设速度的不匹配。</strong></p><ul><li>通过设置多台外设，以数量弥补速度，产生多道程序设计（第三代）。</li><li>通过提高外设速度。</li><li>在硬件设计方面，产生通道、中断技术（第三代）。</li><li>在软件设计方面，使用缓冲区（Buffer），产生脱机技术。</li></ul><p><strong>计算机与人速度的不匹配。</strong></p><ul><li>设置合理的操作员。第一代计算机的操作员没有分工，每个人负责IO和执行；第二代计算机的操作员分为IO和执行两种。</li><li>减少人工干预。从原始的手工干预，到后来早期的批处理。<ul><li>作业控制卡</li><li>作业控制语言JCL</li><li>FORTRAN语言产生（第二代）</li></ul></li><li>多用户。产生分时系统（第三代）</li></ul><h1 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h1><h2 id="操作系统具有并发性"><a href="#操作系统具有并发性" class="headerlink" title="操作系统具有并发性"></a>操作系统具有并发性</h2><p>操作系统支持两个或两个以上的事物在同一时间间隔内发生，例如我们可以在听歌的同时进行聊天。</p><blockquote><p>补充：并行是指两个或两个以上事物在<strong>同一时刻</strong>发生。</p></blockquote><p>在单处理机环境中，某一时刻CPU上只能运行一个程序。依赖于多道程序设计技术，使得多个程序在一个小的时间间隔内交替执行称为可能，从而实现并发。</p><p>实质上，从宏观上讲，并发是多个程序同时运行的；从微观上讲，程序之间是交替执行的。</p><h2 id="操作系统具有共享性"><a href="#操作系统具有共享性" class="headerlink" title="操作系统具有共享性"></a>操作系统具有共享性</h2><p>在操作系统的统一控制下，可以实现计算机中的各种资源在其上运行的程序共同享用。</p><p>共享有两种方式，分为<strong>互斥共享</strong>和<strong>共同访问</strong>。</p><ul><li>互斥共享——某时间内只允许一个进程访问，该进程访问完了，别人才可访问。如：打印机。</li><li>同时访问——某时间段内，允许多个进程同时访问。如：磁盘。</li></ul><blockquote><p>并发和共享是操作系统中两个最基本的特征，它们互为存在条件：资源的共享以程序的并发执行为条件；资源共享使得程序并发称为可能。<br>以同时访问为例，假设文件管理器和文本编辑器并发执行，文件管理器在读取磁盘上的内容，文本编辑器往磁盘上写入内容。因为这两个程序可以并发，所以才磁盘才能被多个程序共享；也正是因为磁盘能够被多个程序共享，才能允许多个程序同时访问磁盘。</p></blockquote><h2 id="操作系统具有虚拟性"><a href="#操作系统具有虚拟性" class="headerlink" title="操作系统具有虚拟性"></a>操作系统具有虚拟性</h2><p>通过某种技术手段把一个物理上的实体，变成多个逻辑上的对应物。如CPU的物理核心和逻辑核心、内存交换区等。多道程序设计使得虚拟称为可能。</p><h2 id="操作系统具有不确定性"><a href="#操作系统具有不确定性" class="headerlink" title="操作系统具有不确定性"></a>操作系统具有不确定性</h2><p>操作系统具有不确定性，也称随机性，是指系统中各种事件的发生顺序是不确定的。</p><p>在多道程序环境下，进程的执行是并发执行的，在微观上是交替执行的，人们无法对某一时刻究竟是执行哪一个程序做出预测。</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>操作系统具有进程管理、存储管理、设备管理、文件管理和操作系统接口五大功能。</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>进程管理又称为处理机管理，其主要目的是提高CPU的利用率。</p><p><strong>主要任务：</strong></p><ul><li>对处理机的分配和运行实施有效管理。 </li><li>在多道程序环境下，处理机的分配和运行以进程为单位，因此对处理机的管理即对进程的管理。</li></ul><p><strong>主要功能：</strong></p><ul><li>进程控制 </li><li>进程同步 </li><li>进程通信</li><li>进程调度</li></ul><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><p>存储管理要管理的资源是内存储器（即内存）。</p><p><strong>主要任务：</strong></p><ul><li>方便用户使用内存</li><li>提高内存的利用率</li><li>从逻辑上扩充内存</li></ul><p><strong>主要功能：</strong></p><ul><li>内存分配 </li><li>地址映射 </li><li>内存保护 </li><li>内存扩充</li></ul><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><p>在设备管理中涉及很多实际物理设备，品种繁多、用法各异；各种外部设备都能与主机并行工作，有的设备还能被多个程序共享；主机与外部设备的速度极不匹配，相差几个数量级甚至更大。<br>设备管理是用来管理计算机各种硬件，是操作系统中最庞杂、最琐碎的部分。</p><p><strong>主要任务：</strong></p><ul><li>完成用户程序请求的I&#x2F;O操作，为用户程序分配I&#x2F;O设备</li><li>提高外部设备的利用 </li><li>尽可能地提高输入&#x2F;输出的速度 </li><li>方便用户使用外部设备</li></ul><p><strong>主要功能：</strong></p><ul><li>设备分配</li><li>设备控制</li><li>设备无关性</li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>程序和数据等信息是以文件的形式存处在计算机中的，所以文件管理也称为信息资源管理，其主要功能是向用户提供一种简便、统一的存取和管理信息的方法，并同时解决信息的共享、安全保密等问题。</p><p><strong>主要功能：</strong></p><ul><li>文件存储空间的管理</li><li>目录管理</li><li>文件的读、写管理</li><li>文件的存取控制</li></ul><h2 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h2><p>为了方便用户的使用，操作系统提供用户与操作系统的接口，分为命令接口和程序接口。</p><p><strong>命令接口：</strong></p><ul><li>联机命令接口</li><li>脱机命令接口</li><li>图形用户界面（命令接口的改版）</li></ul><p><strong>程序接口</strong>也被称为系统调用，是为用户能在程序一级访问操作系统功能而设置的，是用户程序取得操作系统服务的唯一途径。</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="成熟的"><a href="#成熟的" class="headerlink" title="成熟的"></a>成熟的</h2><h3 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h3><ul><li><p>单道批处理系统：内存中仅放一道作业，作业的完成顺序与进驻内存的顺序相关。</p></li><li><p>多道批处理系统：内存中放多道作业，作业的完成顺序与进驻内存的顺序无严格对应关系</p></li><li><p>优点</p><ul><li>资源利用率高</li><li>系统吞吐量大</li></ul></li><li><p>缺点</p><ul><li>平均周转时间长</li><li>无交互能力</li></ul></li></ul><p>实例：DOS&#x2F;VSE</p><h3 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h3><p>允许多个终端用户同时使用计算机，在这样的系统中，用户感觉不到其他用户的存在，好象独占计算机一样。</p><p>类型</p><ul><li>简单分时系统 </li><li>具有前后台的分时系统 </li><li>多道分时系统</li></ul><p>特征</p><ul><li>多路性</li><li>独立性</li><li>交互性</li><li>及时性</li></ul><p>实例：OS&#x2F;360Multics</p><h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><p>对外部输入的信息，实时系统能够在规定的时间内处理完毕并作出反应。</p><p>类型</p><ul><li>闭环——实时控制系统</li><li>开环——实时信息处理系统</li></ul><p>特殊要求</p><ul><li>高可靠性</li><li>过载保护</li><li>对截止时间的要求</li></ul><p>实例：QNX  VxWorks  RTLinux</p><h2 id="发展中的"><a href="#发展中的" class="headerlink" title="发展中的"></a>发展中的</h2><h3 id="微机操作系统"><a href="#微机操作系统" class="headerlink" title="微机操作系统"></a>微机操作系统</h3><ul><li>CP&#x2F;M 操作系统 </li><li>MS-DOS 操作系统 </li><li>OS&#x2F;2  操作系统 </li><li>Windows 操作系统 </li><li>UNIX及类UNIX 操作系统 <ul><li>Solaris </li><li>SVR4</li><li>SCO OpenServer</li><li>SCO Unix Ware 7</li><li>Xenix</li><li>Linux</li></ul></li><li>Mac OS X操作系统</li></ul><h3 id="多处理机操作系统"><a href="#多处理机操作系统" class="headerlink" title="多处理机操作系统"></a>多处理机操作系统</h3><p>引入原因</p><ul><li>增加系统吞吐量</li><li>节省投资</li><li>提高系统可靠性</li></ul><p>多处理机OS类型</p><ul><li>非对称多处理模式——主-从模式</li><li>对称多处理模式——独立管理模式</li></ul><h3 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h3><ul><li>客户&#x2F;服务器模式——Client&#x2F;server</li><li>对等模式——Peer to Peer</li></ul><p>网络OS功能</p><ul><li>网络通信</li><li>资源共享管理</li><li>网络服务</li><li>网络管理</li><li>互操作能力</li></ul><h3 id="分布式操作系统"><a href="#分布式操作系统" class="headerlink" title="分布式操作系统"></a>分布式操作系统</h3><p>分布式系统是由若干个计算机经互连网络连接而成的，这些计算机既可以独立工作，又能协同工作。可实现系统内的资源管理，任务动态分配，并能并行地运行分布式程序。</p><p>特点</p><ul><li>多机合作</li><li>健壮性</li><li>透明性</li><li>共享性</li></ul><h3 id="嵌入式操作系统"><a href="#嵌入式操作系统" class="headerlink" title="嵌入式操作系统"></a>嵌入式操作系统</h3><p>计算机发展的趋势之一是体积越来越小，掌上电脑和嵌入式系统随机出现。掌上电脑也称PDA </p><p>嵌入式计算机，顾名思义即将计算机嵌入到其他设备上，这些设备无处不在，大到汽车发动机、机器人，小到电视机、微波炉、移动电话。运行在其上的操作系统比较简单，只实现所要求的控制功能。</p><p>操作系统上一篇：<a href="/p/20220512/" target="_blank">计算机系统概述</a><br>操作系统下一篇：<a href="/p/20220609/" target="_blank">进程与线程</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统概述</title>
      <link href="/p/20220512/"/>
      <url>/p/20220512/</url>
      
        <content type="html"><![CDATA[<p>操作系统下一篇：<a href="/p/20220513/" target="_blank">操作系统概述</a></p><h1 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h1><img src="/images/操作系统/1计算机系统概述/1-1cover.png" style="zoom: 50%"><ul><li>计算机系统的最外层是使用计算机的人，最内层便是硬件。</li><li>人与计算机硬件之间的接口界面是计算机软件，计算机软件分为系统软件、支撑软件以及应用软件。</li><li>在计算机上配置的各种软件中，操作系统是最重要的，它将各种软、硬件资源管理并优化起来为上层应用提供接口和方便，在计算机系统中起到指挥管理作用。</li></ul><h1 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>计算机系统由一个或多个CPU和若干设备控制器通过共同的总线相互连接。该总线实现了对共享内存的访问。每个设备控制器负责一种特定类型的设备。</p><h2 id="计算机硬件框架"><a href="#计算机硬件框架" class="headerlink" title="计算机硬件框架"></a>计算机硬件框架</h2><img src="/images/操作系统/1计算机系统概述/1-2计算机硬件框架.png" style="zoom: 50%" alt="计算机硬件框架"><p>从逻辑结构上讲，典型的冯·诺依曼计算机是以运算器为中心的，而现代计算机已转化为以存储器为中心</p><ul><li>运算器用来完成算术运算和逻辑运算，并将运算的中间结果暂存在运算器内。 </li><li>存储器用来存放数据和程序。 </li><li>控制器用来控制、指挥程序和数据的输入、运行以及处理运算结果。 </li><li>输入设备用来将人们熟悉的信息形式转换为机器能识别的信息形式，常见的有键盘、鼠标、扫描仪等。 </li><li>输出设备可将机器运算结果转换为人们熟悉的信息系统形式，如显示器输出、打印机输出等。</li></ul><h3 id="中央处理器（CPU）"><a href="#中央处理器（CPU）" class="headerlink" title="中央处理器（CPU）"></a>中央处理器（CPU）</h3><img src="/images/操作系统/1计算机系统概述/1-3CPU.png" style="zoom: 60%" alt="CPU"><p>中央处理器是计算机的大脑，在很大程度上决定了一台计算机的性能。</p><img src="/images/操作系统/1计算机系统概述/1-5CPU内部结构.png" style="zoom: 50%" alt="CPU内部结构"><p>CPU从内存中提取指令并执行它们。CPU在每个工作的基本周期中首先从内存中提取指令，之后对其解码以确定其类型和操作数，最后执行。重复该过程取指、解码并执行下一指令直至所有程序执行完毕。</p><img src="/images/操作系统/1计算机系统概述/1-4指令的执行.png" style="zoom: 50%" alt="指令的执行"><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><img src="/images/操作系统/1计算机系统概述/1-6存储器.png" style="zoom: 50%" alt="存储器"><p>存储器是计算机系统中的记忆设备，用来存放程序和数据。（硬盘就是常见的存储器之一。）</p><p>存储器系统采用了分层结构基于不同的处理方式来进行存储。</p><p>如图所示，从上到下价位越来越低，速度越来越慢，容量越来越大，CPU的访问频度也越来越少。</p><h3 id="I-x2F-O系统"><a href="#I-x2F-O系统" class="headerlink" title="I&#x2F;O系统"></a>I&#x2F;O系统</h3><img src="/images/操作系统/1计算机系统概述/1-7IO系统.png" style="zoom: 50%" alt="IO系统"><p>I&#x2F;O系统由I&#x2F;O软件和I&#x2F;O硬件两部分组成：</p><ul><li>I&#x2F;O软件将用户编制的程序（或数据）输入主机，将运算结果输送到用户，其间最重要的任务是实现输入输出系统与主机工作的协调。</li><li>I&#x2F;O系统的硬件组成是多种多样的，在带有接口的I&#x2F;O系统中，一般包括接口模块及I&#x2F;O设备两大部分。</li></ul><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><img src="/images/操作系统/1计算机系统概述/1-8总线.png" style="zoom: 50%" alt="总线"><p>总线是连接多个部件的信息传输线，是各部件共享的传输介质。可以理解为各个部件之间的通道。</p><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断是指计算机运行过程中，出现某些意外情况需主机干预时，机器能自动停止正在运行的程序并转入处理新情况的程序，处理完毕后又返回原被暂停的程序继续运行。</p><h3 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h3><table><thead><tr><th align="center">类别</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">程序中断</td><td align="center">由指令执行的结果产生的异常或错误。</td></tr><tr><td align="center">时钟中断</td><td align="center">由处理机的计时器产生，允许操作系统以一定规律执行函数。</td></tr><tr><td align="center">I&#x2F;O中断</td><td align="center">由I&#x2F;O控制器产生，用于通知处理机一个操作的正常完成或出现了错误。</td></tr><tr><td align="center">硬件故障中断</td><td align="center">硬件故障。</td></tr></tbody></table><h3 id="中断处理"><a href="#中断处理" class="headerlink" title="中断处理"></a>中断处理</h3><img src="/images/操作系统/1计算机系统概述/1-9中断.png" style="zoom: 50%" alt="中断"><p><strong>过程：请求中断→响应中断→关闭中断→保留断点→中断源识别→保护现场→中断服务子程序→恢复现场→中断返回</strong></p><h3 id="中断与指令周期"><a href="#中断与指令周期" class="headerlink" title="中断与指令周期"></a>中断与指令周期</h3><img src="/images/操作系统/1计算机系统概述/1-10中断与指令周期.png" style="zoom: 50%" alt="中断与指令周期"><h2 id="启动计算机"><a href="#启动计算机" class="headerlink" title="启动计算机"></a>启动计算机</h2><p>计算机启动过程如下（简化）：</p><ul><li>BIOS运行，检查并配置设备。</li><li>寻找启动项，启动操作系统。</li><li>操作系统向BIOS获取配置信息和设备驱动程序并调入内核，同时启动必要进程。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">计算机启动过程如下（详细）：</span><br><span class="line">- BIOS开始运行，检查RAM数量、键盘和其他设备是否安装并正常启动，接着扫描ISA和PCI总线并找出连接其上的所有设备，若现有设备不同于上次启动，则配置新设备。</span><br><span class="line">- BIOS依照CMOS存储器中的设备清单决定启动何种设备。默认情况从硬盘启动。启动设备上的第一个扇区被读入内存并执行，启动时按照分区表检查程序，将活动分区的第二个启动装载模块读入操作系统并执行。</span><br><span class="line">- 操作系统询问BIOS，获得配置信息，当获得全部的设备驱动程序后，操作系统将其调入内核，初始化相关表单，创建需要的进程并在每个终端上启动图形用户界面。</span><br></pre></td></tr></table></figure><p>操作系统下一篇：<a href="/p/20220513/" target="_blank">操作系统概述</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫——简易模拟登录【以科文学院教务官网为例】</title>
      <link href="/p/20220511/"/>
      <url>/p/20220511/</url>
      
        <content type="html"><![CDATA[<blockquote><p>实战：对科文教务系统进行拦截</p></blockquote><p>科文学院教务系统内网地址：<a href="http://10.110.240.221/jsxsd/">http://10.110.240.221/jsxsd/</a></p><p>进入官网后再打开拦截。</p><img src="/images/python/爬虫/1-2错误密码试探.png" alt="错误密码试探" style="zoom:50%;"><p>输入一个错误的账号密码进行试探。</p><p>点击登陆按钮，进行拦截，可以拦截到如下信息：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/jsxsd/xk/LoginToXk</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>10.110.240.221</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>80</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://10.110.240.221</span><br><span class="line"><span class="attribute">DNT</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://10.110.240.221/jsxsd/</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>bzb_jsxsd=253F34A9C34D3A2849F560D88B8EF476; SERVERID=121; bzb_njw=359C682BAE9C81FDC16D469CF9DFEAD5</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">loginMethod</span>=LoginToXk&amp;userAccount=<span class="number">123</span>&amp;userPassword=<span class="number">123</span>&amp;encoded=MTIz%<span class="number">25</span>%<span class="number">25</span>%<span class="number">25</span>MTIz</span></span><br></pre></td></tr></table></figure><p>从所获取的信息中可以得知，登录的接口是<code>POST</code>请求<code>http://10.110.240.221/jsxsd/xk/LoginToXk</code>，传输的数据有：</p><table><thead><tr><th align="center">参数名</th><th align="center">参数值</th></tr></thead><tbody><tr><td align="center">loginMethod</td><td align="center">LoginToXk</td></tr><tr><td align="center">userAccount</td><td align="center">123</td></tr><tr><td align="center">userPassword</td><td align="center">123</td></tr><tr><td align="center">encoded</td><td align="center">MTIz%25%25%25MTIz</td></tr></tbody></table><p>通过重复实验，发现<code>loginMethod</code>的参数值是固定的，同时<code>userAccount</code>和<code>userPassword</code>的值就是账号密码的明文，而<code>encoded</code>参数随着账号密码的变化而变化，而相同的账号密码的<code>encoded</code>值是相同的，因此判断<code>encoded</code>参数值通过对账号密码依据某种规则进行加密得来的，在前端加密，只有通过<code>js</code>的方式，因此只要获取到响应的<code>js</code>函数，即可破解密码，从而实现模拟登录。</p><p>使用<code>Burp</code>工具无法获得异步请求的静态文件。打开浏览器的控制台网络模块，刷新页面，得到如下：</p><p><img src="/images/python/%E7%88%AC%E8%99%AB/1-3%E7%A7%91%E6%96%87%E6%95%99%E5%8A%A1%E5%AE%98%E7%BD%91.png" alt="科文教务官网.png"></p><p>其中<code>js</code>文件有<code>jquery.min.js</code>、<code>jquery-1.11.1.min.js</code>、<code>bootstrap.min.js</code>、<code>conwork.js</code>、<code>layui.all.js</code>，其中<code>jquery</code>、<code>bootstrap</code>、<code>layui</code>都是非常出名的非加密用途的<code>js</code>库，从而怀疑<code>conwork.js</code>。</p><p>获取此响应，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?&quot;&quot;:e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!&#x27;&#x27;.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return&#x27;\\w+&#x27;&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp(&#x27;\\b&#x27;+e(c)+&#x27;\\b&#x27;,&#x27;g&#x27;),k[c]);return p;&#125;(&#x27;b 9=&quot;o+/=&quot;;p q(a)&#123;b e=&quot;&quot;;b 8,5,7=&quot;&quot;;b f,g,c,1=&quot;&quot;;b i=0;m&#123;8=a.h(i++);5=a.h(i++);7=a.h(i++);f=8&gt;&gt;2;g=((8&amp;3)&lt;&lt;4)|(5&gt;&gt;4);c=((5&amp;s)&lt;&lt;2)|(7&gt;&gt;6);1=7&amp;t;k(j(5))&#123;c=1=l&#125;v k(j(7))&#123;1=l&#125;e=e+9.d(f)+9.d(g)+9.d(c)+9.d(1);8=5=7=&quot;&quot;;f=g=c=1=&quot;&quot;&#125;u(i&lt;a.n);r e&#125;&#x27;,32,32,&#x27;|enc4||||chr2||chr3|chr1|keyStr|input|var|enc3|charAt|output|enc1|enc2|charCodeAt||isNaN|if|64|do|length|ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789|function|encodeInp|return|15|63|while|else&#x27;.split(&#x27;|&#x27;),0,&#123;&#125;))</span><br></pre></td></tr></table></figure><p>这是一个加密后的<code>js</code>文件，使用工具对其进行解密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;;</span><br><span class="line">function encodeInp(input) &#123;</span><br><span class="line">    var output = &quot;&quot;;</span><br><span class="line">    var chr1, chr2, chr3 = &quot;&quot;;</span><br><span class="line">    var enc1, enc2, enc3, enc4 = &quot;&quot;;</span><br><span class="line">    var i = 0;</span><br><span class="line">    do &#123;</span><br><span class="line">        chr1 = input.charCodeAt(i++);</span><br><span class="line">        chr2 = input.charCodeAt(i++);</span><br><span class="line">        chr3 = input.charCodeAt(i++);</span><br><span class="line">        enc1 = chr1 &gt;&gt; 2;</span><br><span class="line">        enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);</span><br><span class="line">        enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);</span><br><span class="line">        enc4 = chr3 &amp; 63;</span><br><span class="line">        if (isNaN(chr2)) &#123;</span><br><span class="line">            enc3 = enc4 = 64</span><br><span class="line">        &#125; else if (isNaN(chr3)) &#123;</span><br><span class="line">            enc4 = 64</span><br><span class="line">        &#125;</span><br><span class="line">        output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);</span><br><span class="line">        chr1 = chr2 = chr3 = &quot;&quot;;</span><br><span class="line">        enc1 = enc2 = enc3 = enc4 = &quot;&quot;</span><br><span class="line">    &#125; while ( i &lt; input . length );</span><br><span class="line">    return output</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过测试，确认该文件就是加密文件。</p><p>后通过<code>python</code>进行爬虫，成功使用<code>requests</code>模块实现模拟登录。</p><p>启示：</p><p>科文学院教务官网毫无安全性可言，很容易发生不可挽回的可怕后果，通过对<code>bilibili</code>、<code>网易</code>两大互联网公司的网站进行类似的模拟操作，明显可以发现科文学院教务官网的不足之处。</p><p>在上述两大互联网公司的网站中，常见的安全手段有：</p><ol><li>通过放置大量的没有用的静态文件，加大破解者的工作量。</li><li>通过设置大量静态文件，每次访问时随机加载一定数量的静态文件，达到每次访问都会收到不同的静态文件的目的，来干扰破解者。</li><li>通过放置多个加密函数，而不是只传输一个加密函数，让破解者在寻找对应函数的时候耗费大量精力。</li><li>通过对加密函数的函数名非正常化，例如科文教务的加密函数叫<code>encodeInp</code>，可以重命名为<code>login</code>，以迷惑破解者，甚至可以让破解者直接忽略此函数。</li><li>通过设置图形验证码。</li><li>使用非对称加密。</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 模拟登录 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码级】async魔改</title>
      <link href="/p/20220510/"/>
      <url>/p/20220510/</url>
      
        <content type="html"><![CDATA[<p>主题地址：<a href="https://github.com/MaLuns/hexo-theme-async">https://github.com/MaLuns/hexo-theme-async</a></p><h1 id="文章页面"><a href="#文章页面" class="headerlink" title="文章页面"></a>文章页面</h1><h2 id="删除other-articles"><a href="#删除other-articles" class="headerlink" title="删除other articles"></a>删除other articles</h2><p>原页面如下：<br><img src="/images/%E5%85%B6%E4%BB%96/async%E9%AD%94%E6%94%B9/11-other-article%E5%8E%9F%E9%A1%B5%E9%9D%A2.png" alt="article原页面"><br>但是工作室认为并不需要此模块，需要对其进行去除。</p><p>找到主题文件下的<code>layout/post.ejs</code>文件，搜索<code>articles</code>，找到如下代码，添加两行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加的第一行代码 --&gt;</span></span><br><span class="line">&lt;% if (theme.article.other) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-12&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- title --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;trm-mb-40 trm-title-with-divider&quot;</span>&gt;</span></span><br><span class="line">                &lt;%- __(&#x27;title.other_articles&#x27;) %&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-number</span>=<span class="string">&quot;02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &lt;% if(page.prev)&#123; %&gt;</span><br><span class="line">            &lt;%- partial(&#x27;./_partial/post-card&#x27;,&#123; post: page.prev &#125;) %&gt;</span><br><span class="line">        &lt;%&#125;%&gt;</span><br><span class="line">        &lt;% if(page.next)&#123; %&gt;</span><br><span class="line">            &lt;%- partial(&#x27;./_partial/post-card&#x27;,&#123; post: page.next &#125;) %&gt;</span><br><span class="line">        &lt;%&#125;%&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加的第二行代码 --&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在主题的配置文件中，添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">article:</span></span><br><span class="line">  <span class="attr">other:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>如果<code>other</code>为<code>true</code>，则开启其他文章，若为<code>false</code>，则为不开启。</p><h2 id="添加作者"><a href="#添加作者" class="headerlink" title="添加作者"></a>添加作者</h2><p>在原主题中，博客的作者就是网站的作者，不可修改。但本博客是工作室运营，有区分作者的需求。<br><img src="/images/%E5%85%B6%E4%BB%96/async%E9%AD%94%E6%94%B9/11-author.png" alt="article原页面"><br>找到主题文件下的<code>layout/post.ejs</code>文件，搜索<code>theme.user.name</code>，做出如下修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;trm-card trm-label trm-label-light text-center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-user trm-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 原来的代码 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;%= theme.user.name %&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改后的代码 --&gt;</span></span><br><span class="line">    &lt;% if (!theme.article.author) &#123; %&gt;</span><br><span class="line">    &lt;%= theme.user.name %&gt;</span><br><span class="line">    &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;%= page.author %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在文章的<code>markdown</code>文件里写<code>author</code>参数即可显示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 主题魔改</span><br><span class="line">date: 2022-05-11 22:54:43</span><br><span class="line"><span class="section">author: 王建文</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>在主题的配置文件中添加参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">article:</span></span><br><span class="line">  <span class="attr">author:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当<code>author</code>为<code>true</code>时，作者使用博客内的<code>author</code>，当为<code>false</code>是使用的是整个项目的作者。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> async主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中的内存分配 —— 以Java为例</title>
      <link href="/p/20220509/"/>
      <url>/p/20220509/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是一种用于存储一定数量的同一种数据类型的连续空间，既可以存储基本类型，也可以存储引用类型。</p><p>在Java中，数组是以对象的形式存在。</p><p>在Java中，初始化数组有两种方式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态初始化：初始化时指定长度，元素值为对应类型的初始值，</span></span><br><span class="line"><span class="type">int</span>[]dynamic = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组长度</span></span><br><span class="line"><span class="type">int</span>[]state = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>在定义多维数组时，行不可以省略。</p><h1 id="数组的内存分配"><a href="#数组的内存分配" class="headerlink" title="数组的内存分配"></a>数组的内存分配</h1><h2 id="堆栈分析"><a href="#堆栈分析" class="headerlink" title="堆栈分析"></a>堆栈分析</h2><p>在Java中，数组是以对象的形式存在。与对相类似，数组的存放也需要堆内存和栈内存，当在方法中执行<code>int[] arr = new int[3];</code>语句时，存储空间示意图如下：</p><p style="text-align: center;"><img src="/images/其他/数组的内存分配/1-1堆栈示意图.png" alt="堆栈示意图" style="zoom: 60%;"></p><p>解析：<code>arr</code>为对象引用，存放在栈内存中，<code>new int[3]</code>为对象的值，存放在堆内存中（前提是在方法中执行该条语句）。</p><p>如果此时对数组内容进行修改，如<code>arr[1] = 100</code>，则会发生如下：</p><p style="text-align: center;"><img src="/images/其他/数组的内存分配/1-2堆栈示意图.png" alt="堆栈示意图" style="zoom: 60%;"></p><p>如果此时对以一个新数组，<code>int[] arr1 = arr;</code>，示意图则如下：</p><p style="text-align: center;"><img src="/images/其他/数组的内存分配/1-3堆栈示意图.png" alt="堆栈示意图" style="zoom: 60%;"></p>如果此时对`arr1`的内容进行修改，则`arr`也会随之变化，因为它们共享一个数组实例。<h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>一维数组的结构很简单。<br>假设：定义如下数组<code>A[] a = new A[5];</code>，其中每个<code>A</code>的实例（值）占X个字节，数组的第一个元素所在位置是M，则有：</p><p style="text-align: center;"><img src="/images/其他/数组的内存分配/2-1一维数组的内存结构.png" alt="一维数组的内存结构" style="zoom: 60%;"></p><h3 id="多维数组Java版（以二维数组为例）"><a href="#多维数组Java版（以二维数组为例）" class="headerlink" title="多维数组Java版（以二维数组为例）"></a>多维数组Java版（以二维数组为例）</h3><p>以如下数组<code>int[][] a = new int[3][];</code>为例：</p><p style="text-align: center;"><img src="/images/其他/数组的内存分配/3-1二维数组内存结构.png" alt="二维数组内存结构" style="zoom: 60%;"></p><p>在上面，二维数组a元素均为<code>null</code>，如果需要对二维数组进行赋值，则需要对每一个元素进行一维数组实例化，以如下代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p style="text-align: center;"><img src="/images/其他/数组的内存分配/3-2二维数组内存结构.png" alt="二维数组内存结构" style="zoom: 60%;"></p><p>由图可知，在Java中，无法根据第一个元素在内存中的位置推断出其他行中的元素的位置。</p><h3 id="对维数组C版（以二维数组为例）"><a href="#对维数组C版（以二维数组为例）" class="headerlink" title="对维数组C版（以二维数组为例）"></a>对维数组C版（以二维数组为例）</h3><p>C语言中的二维数组存放方式和Java不同，C语言的二维数组排列方式如下图所示，其根本原因是Java支持面向对象，而C不支持。</p><p style="text-align: center;"><img src="/images/其他/数组的内存分配/3-3C语言二维数组的内存结构.png" alt="C语言二维数组的内存结构" style="zoom: 60%;"></p><h1 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h1><p>综上所述，在讨论多维数组元素在内存中的位置时，一般来讲，都是以C语言的内存分配方式来计算。<br>例题：<br><a href="https://www.nowcoder.com/questionTerminal/64ac01df98fa4428ad7e6739a964bd83">https://www.nowcoder.com/questionTerminal/64ac01df98fa4428ad7e6739a964bd83</a><br><a href="https://www.nowcoder.com/questionTerminal/3b910209bab240dc8f1a068cea35fb12">https://www.nowcoder.com/questionTerminal/3b910209bab240dc8f1a068cea35fb12</a><br>第二题应当注意的是题目中要求<strong>以列为主存放</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【wine】Deepin中使用exe（Ubuntu通用）</title>
      <link href="/p/20220508/"/>
      <url>/p/20220508/</url>
      
        <content type="html"><![CDATA[<p>Deepin工具：<br><a href="/p/20220502/" target="_blank">【转载】Deepin 20.5系统外接扩展屏幕不显示？安装配置NVIDIA显卡驱动</a><br><a href="/p/20220503/" target="_blank">【转载】Deepin系统安装Go&#x2F;Java8&#x2F;Node&#x2F;Maven&#x2F;Docker环境</a><br><a href="/p/20220504/" target="_blank">Deepin系统打开WiFi就不能开热点？三个步骤解决问题</a><br><a href="/p/20220508/" target="_blank">【wine】Deepin中使用exe（Ubuntu通用）</a></p><h1 id="介绍与安装"><a href="#介绍与安装" class="headerlink" title="介绍与安装"></a>介绍与安装</h1><p>Deepin系统虽然好用，但是有时我们需要的软件只有exe版本，不支持Linux，这个时候我们就需要向wine求助了。</p><p>Wine是一个开源兼容层，允许您在Linux，FreeBSD和MacOS等UNIX的操作系统上运行Windows应用程序。 Wine是“Wine Is Not an Emulator”的首字母缩写。 它将Windows系统调用转换为基于UNIX的操作系统条用，等效于POSIX调用，允许您将Windows程序无缝集成到桌面环境中。</p><blockquote><p>事实上，并不是所有的exe都能通过wine执行，你可以把它理解为Windows的Docker镜像，是一个阉割版。</p></blockquote><p>官网：<a href="https://www.winehq.org/">https://www.winehq.org/</a></p><p>我们可以通过点击wine官网上的下载去获取对应系统的安装方法：</p><p style="text-align: center;"><img src="/images/工具/deepin/4-1wine官网.png" alt="wine官网" style="zoom: 60%;"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>安装完之后，我们就可以正常使用了。对于普通的exe可执行程序来说，我们只需要执行如下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine xxx.exe</span><br></pre></td></tr></table></figure><p>如果exe是一个安装包，我们同样通过上述命令执行安装（安装过程中所有配置最好遵守默认），安装完成之后，和Windows类似，会在<code>~/.wine/drive_c/Program Files</code>或<code>~/.wine/drive_c/Program Files (X86)</code>目录内创建安装目录（如果你选择安装的是C盘的话）；同时会在<code>~/.local/share/applications/wine/Programs</code>和<code>~/.config/menus/applications-merged</code>目录下生成对应的目录或文件。</p><p>以安装<a href="http://www.zip-password-cracker.com/">zip_password_tool_setup.exe</a>为例：</p><p style="text-align: center;"><img src="/images/工具/deepin/4-2zip-password-tool安装1.png" alt="zip-password-tool安装1" style="zoom: 60%;"></p><p>然后一路傻瓜式安装，和Windows一样，不多赘述。</p><p>安装完就可以正常使用了，同时可以在应用列表中看到对应的图标：</p><p style="text-align: center;"><img src="/images/工具/deepin/4-2zip-password-tool安装2.png" alt="zip-password-tool安装2" style="zoom: 60%;"></p><h1 id="卸载通过wine安装的应用"><a href="#卸载通过wine安装的应用" class="headerlink" title="卸载通过wine安装的应用"></a>卸载通过wine安装的应用</h1><p>以zip_password_tool为例，卸载可以通过点击<code>Uninstall Zip Password Tool</code>程序进行卸载，但是可能会存在特殊情况，即卸载完成后，应用列表中依然存在，这个时候我们可以手动去卸载。</p><p>如图，找到这三个目录：</p><p style="text-align: center;"><img src="/images/工具/deepin/4-3zip-password-tool卸载.png" alt="zip-password-tool卸载" style="zoom: 60%;"></p><p>把和对应软件相关的目录和文件删除，即完全卸载完成（应用列表里也会消失）。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Deepin </tag>
            
            <tag> wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile暴力入门</title>
      <link href="/p/20220507/"/>
      <url>/p/20220507/</url>
      
        <content type="html"><![CDATA[<p>Docker上一篇：<a href="/p/20220506/" target="_blank">Docker暴力入门</a><br>Docker下一篇：<a href="/p/20220529/" target="_blank">Docker网络</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a>，用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><h2 id="编写步骤"><a href="#编写步骤" class="headerlink" title="编写步骤"></a>编写步骤</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LR;A[编写 Dockerfile 文件]B[docker build 命令构建]C[docker run 镜像运行容器实例]A --&gt; B --&gt; C  </pre></div><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TD;A[docker 从基础镜像运行一个容器]B[执行一条指令并对容器作出修改]C[执行类似 docker commit 的操作提交一个新的镜像层]D[docker 再基于刚提交的镜像运行一个新容器]E[执行 dockerfile 中的下一条指令 , 直到所有指令都执行完成]A --&gt; B --&gt; C --&gt; D --&gt; E  </pre></div><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="FROM-MAINTAINER-EXPOSE-WORKDIR-USER-VOLUME"><a href="#FROM-MAINTAINER-EXPOSE-WORKDIR-USER-VOLUME" class="headerlink" title="FROM | MAINTAINER | EXPOSE | WORKDIR | USER  | VOLUME"></a>FROM | MAINTAINER | EXPOSE | WORKDIR | USER  | VOLUME</h2><p>FROM：基础镜像，即当前镜像是基于哪个镜像的，第一条必须是FROM<br>MAINTAINER：镜像维护者的姓名和邮箱地址<br>EXPOSE：当前容器对外暴露出的端口<br>WORKDIR：指定在创建容器后，终端默认登录进来的工作目录<br>USER：指定该镜像以什么样的用户去执行，如果不指定，默认是root（一般不指定）<br>VOLUME：容器数据卷，用于数据保存和持久化工作</p><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>容器构建时需要运行的命令，有两种格式，分别是shell格式和exec格式。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;yum&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;-y&quot;</span>, <span class="string">&quot;vim&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>RUN是在docker build时运行的</p><h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>用来构建镜像过程中设置环境变量<br>设置的环境变量可以在后续指令中使用，例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> MY_PATH /usr/my_path</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MY_PATH</span></span></span><br></pre></td></tr></table></figure><h2 id="ADD-COPY"><a href="#ADD-COPY" class="headerlink" title="ADD | COPY"></a>ADD | COPY</h2><p>ADD：将宿主机目录下的文件拷贝进镜像（自动处理URL和tar压缩包）<br>COPY：类似<code>ADD</code>，但是只是单纯的拷贝</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>指定容器启动后要执行的命令</p><ul><li>支持<code>shell</code>格式和<code>exec</code>格式</li><li>在指定了<code>ENTRYPOINT</code>指令后，用CMD指定具体参数。</li></ul><p>注意：</p><ul><li>可以指定多个<code>CMD</code>指令，但只有最后一个生效，<code>CMD</code>会被<code>docker run</code>之后的参数替换</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tomcat最后一行是 CMD [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果执行如下命令，tomcat服务将无法正常启动</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat /bin/bash</span><br></pre></td></tr></table></figure><p>和<code>RUN</code>命令的区别：<code>CMD</code>命令是在<code>docker run</code>时运行的，<code>RUN</code>是在<code>docker build</code>时运行的</p><h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><p>和<code>CMD</code>相同，是用来指定一个容器运行时需要执行的命令，但不同的是<code>ENTRYPOINT</code>不会被<code>docker run</code>后面的命令覆盖。<br>通常和<code>CMD</code>命令配合使用，当<code>CMD</code>在<code>ENTRYPOINT</code>命令后时，<code>CMD</code>用于给<code>ENTRYPOINT</code>传递参数。<br>例如构建<code>nginx:test</code>镜像：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>指定的等价效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run nginx:test # nginx -c /etc/nginx/nginx.conf</span><br><span class="line">docler run nginx:test /etc/nginx/new.conf # nginx -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="构建可以ssh登录的centos7"><a href="#构建可以ssh登录的centos7" class="headerlink" title="构建可以ssh登录的centos7"></a>构建可以ssh登录的centos7</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir centos7_ssh</span><br><span class="line">cd centos7_ssh</span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p>Dockerfile内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于哪个镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhinushannan&lt;zhinushannan@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> ROOT_PASSWORD <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum安装openssh-server、openssh-clients、net-tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y openssh-server</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y openssh-clients</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置root账号的密码</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$ROOT_PASSWORD</span> | passwd --stdin root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成ssh的key</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动时，启动sshd服务</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/sbin/sshd&quot;</span>, <span class="string">&quot;-D&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听22端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">22</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centos_ssh:7 .  # 构建</span><br><span class="line">docker run -d -p 9000:22 centos_ssh:7  # 启动</span><br><span class="line">ssh root@10.103.3.59 -p 9000  # ssh登录，其中ip应当是本机的ip</span><br><span class="line">ssh-keygen -f &quot;/home/zhinushannan/.ssh/known_hosts&quot; -R &quot;[10.103.3.59]:9000&quot;  # 删除容器后，应当删除对应的签名</span><br></pre></td></tr></table></figure><h1 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h1><p><code>REPOSITORY</code>和<code>TAG</code>都是<code>&lt;none&gt;</code>的镜像。<br>查看虚悬镜像：<code>docker images -f dangling=true</code><br>移除所有虚悬镜像：<code>docker image prune</code></p><p>Docker上一篇：<a href="/p/20220506/" target="_blank">Docker暴力入门</a><br>Docker下一篇：<a href="/p/20220529/" target="_blank">Docker网络</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker暴力入门</title>
      <link href="/p/20220506/"/>
      <url>/p/20220506/</url>
      
        <content type="html"><![CDATA[<p>Docker下一篇：<a href="/p/20220507/" target="_blank">Dockerfile暴力入门</a></p><blockquote><p>注：本篇博客中所有内容均是极速入门，需要深入探究请移步：<br><a href="https://developer-help.cn/index.php/category/Docker/">万物皆可喵的Docker分类</a><br>尚硅谷Docker脑图：<a href="/docker.html" target="_blank">Docker.html</a></p></blockquote><h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h1><p>什么是Docker？<a href="https://baike.baidu.com/item/Docker/13344470">百度百科</a></p><blockquote><p>如果你想使用MySQL，需要下载、安装、配置、开启服务，其中任何一个步骤出错就能要了老命。但是，一旦你安装了Docker，使用MySQL服务也就几行命令的事，因为你可以直接从Docker仓库中获取安装好MySQL环境的镜像，开箱即用拎包入住。</p></blockquote><h1 id="如何安装？-任意Linux发行版"><a href="#如何安装？-任意Linux发行版" class="headerlink" title="如何安装？(任意Linux发行版)"></a>如何安装？(任意Linux发行版)</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h1 id="镜像加速（阿里云版）"><a href="#镜像加速（阿里云版）" class="headerlink" title="镜像加速（阿里云版）"></a>镜像加速（阿里云版）</h1><p style="text-align: center;"><img src="/images/运维/Docker/1-1阿里云容器镜像服务1.png" alt="阿里云容器镜像服务1" style="zoom: 60%;"></p><p style="text-align: center;"><img src="/images/运维/Docker/1-2阿里云容器镜像服务2.png" alt="阿里云容器镜像服务2" style="zoom: 60%;"></p><h1 id="启动与测试Docker"><a href="#启动与测试Docker" class="headerlink" title="启动与测试Docker"></a>启动与测试Docker</h1><p>启动Docker服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>测试Docker（需在root用户下）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm hello-world</span><br></pre></td></tr></table></figure><p>执行如上命令，若出现如下内容即为安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete</span><br><span class="line">Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta prompt_"> $ </span><span class="language-bash">docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h1 id="配置非root用户使用Docker"><a href="#配置非root用户使用Docker" class="headerlink" title="配置非root用户使用Docker"></a>配置非root用户使用Docker</h1><p>步骤：</p><ol><li>新建docker用户组</li><li>将指定用户添加进docker用户组</li><li>重启docker服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker [username]</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="镜像类"><a href="#镜像类" class="headerlink" title="镜像类"></a>镜像类</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images # 查看本地镜像仓库</span><br><span class="line">docker pull [images name][:version] # 拉取一个镜像</span><br><span class="line">docker rmi [images id] # 通过镜像id删除一个镜像（id不一定要写全，可以只写前几位，但是要求通过前几位可以定位到唯一的镜像）</span><br></pre></td></tr></table></figure><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 查看存活的容器</span><br><span class="line">docker ps -a # 查看所有容器（包括死亡的）</span><br><span class="line">docker stop [contains id] # 通过容器id停止容器（id不一定要写全，可以只写前几位，但是要求通过前几位可以定位到唯一的容器）</span><br><span class="line">docker start [contains id] # 通过容器id启动一个已经死亡的容器（id不一定要写全，可以只写前几位，但是要求通过前几位可以定位到唯一的容器）</span><br><span class="line">docker restart [contains id] # 通过容器id重启一个正在运行的容器（id不一定要写全，可以只写前几位，但是要求通过前几位可以定位到唯一的容器）</span><br><span class="line">docker rm [contains id] # 通过容器id删除一个已经停止容器（id不一定要写全，可以只写前几位，但是要求通过前几位可以定位到唯一的容器）</span><br></pre></td></tr></table></figure><h1 id="常见容器的安装和启动"><a href="#常见容器的安装和启动" class="headerlink" title="常见容器的安装和启动"></a>常见容器的安装和启动</h1><h2 id="安装（大部分的镜像安装方法相同）"><a href="#安装（大部分的镜像安装方法相同）" class="headerlink" title="安装（大部分的镜像安装方法相同）"></a>安装（大部分的镜像安装方法相同）</h2><ol><li>访问Docker Hub，寻找适合的镜像（以MySQL）</li><li>下载</li></ol><p style="text-align: center;"><img src="/images/运维/Docker/1-3Docker-Hub-MySQL1.png" alt="Docker-Hub-MySQL1" style="zoom: 60%;"></p><p style="text-align: center;"><img src="/images/运维/Docker/1-4Docker-Hub-MySQL2.png" alt="Docker-Hub-MySQL2" style="zoom: 60%;"></p><p style="text-align: center;"><img src="/images/运维/Docker/1-5Docker-Hub-MySQL3.png" alt="Docker-Hub-MySQL3" style="zoom: 60%;"></p><p style="text-align: center;"><img src="/images/运维/Docker/1-6Docker-Hub-MySQL4.png" alt="Docker-Hub-MySQL4" style="zoom: 60%;"></p><p>下载最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>下载指定版本（例如5.7）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="MySQL的启动"><a href="#MySQL的启动" class="headerlink" title="MySQL的启动"></a>MySQL的启动</h2><p>如果不是最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=[容器名称] -it -p [使用的端口号]:3306 -e MYSQL_ROOT_PASSWORD=[数据库密码] -d mysql[:版本]</span><br></pre></td></tr></table></figure><p>如果是最新版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=[容器名称] -it -p [使用的端口号]:3306 -e MYSQL_ROOT_PASSWORD=[数据库密码] -d mysql</span><br></pre></td></tr></table></figure><p>Docker下一篇：<a href="/p/20220507/" target="_blank">Dockerfile暴力入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码级】butterfly魔改</title>
      <link href="/p/20220505/"/>
      <url>/p/20220505/</url>
      
        <content type="html"><![CDATA[<h1 id="首页文章使用新标签页打开"><a href="#首页文章使用新标签页打开" class="headerlink" title="首页文章使用新标签页打开"></a>首页文章使用新标签页打开</h1><p>官方没有提供解决方案，但是可以通过修改源码的方式进行修改。<br>找到主题下的<code>layout/includes/mixins/post-ui.pug</code>，在第16行、第19行添加<code>target=&quot;_blank&quot;</code>即可实现。<br><img src="/images/其他/butterfly魔改/1.post-ui.pug文件.png"></p><h1 id="标签、分类页使用新标签打开"><a href="#标签、分类页使用新标签打开" class="headerlink" title="标签、分类页使用新标签打开"></a>标签、分类页使用新标签打开</h1><p>官方没有提供解决方案，但是可以通过修改源码的方式进行修改。<br>找到主题下的<code>layout/includes/mixins/article-sort.pug</code>，在第19行添加<code>target=&quot;_blank&quot;</code>即可实现。<br><img src="/images/其他/butterfly魔改/2.article-sort.pug文件.png"></p><h1 id="魔改Valine评论【支持cave-draw画图】"><a href="#魔改Valine评论【支持cave-draw画图】" class="headerlink" title="魔改Valine评论【支持cave-draw画图】"></a>魔改Valine评论【支持cave-draw画图】</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>效果如图，即可以在评论区使用画图工具：<br><img src="/images/其他/butterfly魔改/3.cave-draw效果图.png"></p><p>插件项目地址：<a href="https://github.com/flatblowfish/cave-draw">为你的评论表单添加一个画图板</a></p><p>进入项目第之后后，使用<code>CTRL+F</code>搜索<code>Valine</code><br><img src="/images/其他/butterfly魔改/4.cave-draw项目地址.png"></p><h2 id="【进入正题】"><a href="#【进入正题】" class="headerlink" title="【进入正题】"></a>【进入正题】</h2><h3 id="第一步：Valine-min-js操作"><a href="#第一步：Valine-min-js操作" class="headerlink" title="第一步：Valine.min.js操作"></a>第一步：Valine.min.js操作</h3><p>下载<a href="https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js">Valine.min.js</a>，放在source下的一个目录，我放的是<code>npm/valine/dist/</code>目录，如图：<br><img src="/images/其他/butterfly魔改/5.Valine.min.js目录.png"></p><p>下载完成之后，将该文件格式化一下，通过搜索工具搜索定位到如图位置，并在函数的第一行添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;data:image/&quot;</span> == e.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">11</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><img src="/images/其他/butterfly魔改/6.js文件修改.png"><p>在<code>_config.yml</code>文件中修改编译跳过的文件（因为文件太长了，如果不跳过的话会被编译，从而丢失后半段代码）<br><img src="/images/其他/butterfly魔改/7.配置文件修改.png"></p><p>修改完之后最好检查一下<code>localhost:4000/npm/valine/dist/Valine.min.js</code>是否和源文件一样。</p><h3 id="第二步：修改主题代码"><a href="#第二步：修改主题代码" class="headerlink" title="第二步：修改主题代码"></a>第二步：修改主题代码</h3><p>找到主题目录下的<code>butterfly/layout/includes/third-party/comments/valine.pug</code>文件，原文件这幅模样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- let emojiMaps = &#x27;&quot;&quot;&#x27;</span><br><span class="line">if site.data.valine</span><br><span class="line">  - emojiMaps = JSON.stringify(site.data.valine)</span><br><span class="line"></span><br><span class="line">script.</span><br><span class="line">  function loadValine () &#123;</span><br><span class="line">    function initValine () &#123;</span><br><span class="line">      const valine = new Valine(Object.assign(&#123;</span><br><span class="line">        el: &#x27;#vcomment&#x27;,</span><br><span class="line">        appId: &#x27;#&#123;theme.valine.appId&#125;&#x27;,</span><br><span class="line">        appKey: &#x27;#&#123;theme.valine.appKey&#125;&#x27;,</span><br><span class="line">        avatar: &#x27;#&#123;theme.valine.avatar&#125;&#x27;,</span><br><span class="line">        serverURLs: &#x27;#&#123;theme.valine.serverURLs&#125;&#x27;,</span><br><span class="line">        emojiMaps: !&#123;emojiMaps&#125;,</span><br><span class="line">        path: window.location.pathname,</span><br><span class="line">        visitor: #&#123;theme.valine.visitor&#125;</span><br><span class="line">      &#125;, !&#123;JSON.stringify(theme.valine.option)&#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (typeof Valine === &#x27;function&#x27;) initValine() </span><br><span class="line">    else getScript(&#x27;!&#123;url_for(theme.CDN.valine)&#125;&#x27;).then(initValine)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (&#x27;!&#123;theme.comments.use[0]&#125;&#x27; === &#x27;Valine&#x27; || !!&#123;theme.comments.lazyload&#125;) &#123;</span><br><span class="line">    if (!&#123;theme.comments.lazyload&#125;) btf.loadComment(document.getElementById(&#x27;vcomment&#x27;),loadValine)</span><br><span class="line">    else setTimeout(loadValine, 0)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    function loadOtherComment () &#123;</span><br><span class="line">      loadValine()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>需要修改成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- let emojiMaps = &#x27;&quot;&quot;&#x27;</span><br><span class="line">if site.data.valine</span><br><span class="line">  - emojiMaps = JSON.stringify(site.data.valine)</span><br><span class="line"></span><br><span class="line">script.</span><br><span class="line">  new CaveDraw(&#123;</span><br><span class="line">    ele: &#x27;#veditor&#x27;,</span><br><span class="line">    special: &#x27;valine&#x27;,</span><br><span class="line">    openBtn: &#123;</span><br><span class="line">      style: &#x27;background-color:#b37ba4;color:white;&#x27;,</span><br><span class="line">      hoverStyle: &#x27;background-color: #49d0c0;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    canvasStyle: &#x27;cursor:crosshair;background:whitesmoke;/*margin-bottom:5px;border-radius:0px;*/&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  var valine = new Valine();</span><br><span class="line">  valine.init(&#123;</span><br><span class="line">    el: &#x27;#vcomment&#x27;,</span><br><span class="line">    appId: &#x27;#&#123;theme.valine.appId&#125;&#x27;,</span><br><span class="line">    appKey: &#x27;#&#123;theme.valine.appKey&#125;&#x27;,</span><br><span class="line">    avatar: &#x27;#&#123;theme.valine.avatar&#125;&#x27;,</span><br><span class="line">    serverURLs: &#x27;#&#123;theme.valine.serverURLs&#125;&#x27;,</span><br><span class="line">    emojiMaps: !&#123;emojiMaps&#125;,</span><br><span class="line">    path: window.location.pathname,</span><br><span class="line">    visitor: #&#123;theme.valine.visitor&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个过程中，参数并没有发生变化，只是改变了Valine实例创建的方式（从原来的构造更换成了new）。同时，在创建Valine实例前，创建CaveDraw对象。</p><p>在<code>source/css/</code>（没有css目录自行创建）目录下创建<code>cavedraw.css</code>文件，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.brush-detail</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1em</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v</span><span class="selector-attr">[data-class=<span class="string">&quot;v&quot;</span>]</span> <span class="selector-class">.veditor</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">17em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>_config.butterfly.yml</code>配置文件（通过搜索找到对应的位置修改）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/cavedraw.css&quot;</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    - &lt;script src=&quot;https://cdn.jsdelivr.net/gh/flatblowfish/cave-draw/dist/cave-draw.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    - &lt;script src=&quot;/npm/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">bottom:</span></span><br><span class="line">  <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">valine:</span> <span class="string">/npm/valine/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure><p>完结撒花！！！！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> butterfly主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin系统打开WiFi就不能开热点？三个步骤解决问题</title>
      <link href="/p/20220504/"/>
      <url>/p/20220504/</url>
      
        <content type="html"><![CDATA[<p>Deepin工具：<br><a href="/p/20220502/" target="_blank">【转载】Deepin 20.5系统外接扩展屏幕不显示？安装配置NVIDIA显卡驱动</a><br><a href="/p/20220503/" target="_blank">【转载】Deepin系统安装Go&#x2F;Java8&#x2F;Node&#x2F;Maven&#x2F;Docker环境</a><br><a href="/p/20220504/" target="_blank">Deepin系统打开WiFi就不能开热点？三个步骤解决问题</a><br><a href="/p/20220508/" target="_blank">【wine】Deepin中使用exe（Ubuntu通用）</a></p><h1 id="第一步：准备"><a href="#第一步：准备" class="headerlink" title="第一步：准备"></a>第一步：准备</h1><h2 id="查看是否支持AP模式"><a href="#查看是否支持AP模式" class="headerlink" title="查看是否支持AP模式"></a>查看是否支持AP模式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iw list</span><br></pre></td></tr></table></figure><p style="text-align: center;"><img src="/images/工具/deepin/3-1是否支持AP模式.png" alt="是否支持AP模式" style="zoom: 60%;"></p><h2 id="安装create-ap"><a href="#安装create-ap" class="headerlink" title="安装create_ap"></a>安装create_ap</h2><p>找一个目录，安装create_ap。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/oblique/create_ap</span><br><span class="line">cd create_ap</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="连接WiFi并查看网卡名称"><a href="#连接WiFi并查看网卡名称" class="headerlink" title="连接WiFi并查看网卡名称"></a>连接WiFi并查看网卡名称</h2><p style="text-align: center;"><img src="/images/工具/deepin/3-2网卡名称.png" alt="网卡名称" style="zoom: 60%"></p><h1 id="第二步：创建虚拟网卡并设置MAC地址"><a href="#第二步：创建虚拟网卡并设置MAC地址" class="headerlink" title="第二步：创建虚拟网卡并设置MAC地址"></a>第二步：创建虚拟网卡并设置MAC地址</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iw dev [上一步骤获得的网卡名称] interface add [你想要创建的虚拟网卡的名称] type __ap</span><br><span class="line">sudo ip link set dev [创建的网卡名称] address [任意的MAC地址]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iw dev wlo1 interface add wlan1 type __ap</span><br><span class="line">sudo ip link set dev wlan1 address 22:33:aa:dd:66:00</span><br></pre></td></tr></table></figure><p>其中<code>22:33:aa:dd:66:00</code>是虚拟网卡的MAC地址，可以随便填写，如果有冲突随意更换。</p><h1 id="第三步：使用create-ap创建热点"><a href="#第三步：使用create-ap创建热点" class="headerlink" title="第三步：使用create_ap创建热点"></a>第三步：使用create_ap创建热点</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo create_ap -c 11 [虚拟网卡名称] [有线网卡名称] [热点名] [热点密码（大于等于8位）]</span><br></pre></td></tr></table></figure><p>有线网卡名称可以通过<code>ifconfig</code>命令去查询，但是需要筛选，最简单的方法是给自己电脑插上网线，和无线网卡一样查找：</p><p style="text-align: center;"><img src="/images/工具/deepin/3-3有线网卡名称.jpg" alt="有线网卡名称" style="zoom: 60%"></p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo create_ap -c 11 wlan1 enp7s0 zhinushannan-deepin 12345678</span><br></pre></td></tr></table></figure><p>上面这条命令依赖于终端，当终端关闭时热点就断开了，可以通过<code>nohup</code>后台运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nohup create_ap -c 11 wlan1 enp7s0 zhinushannan-deepin 12345678 &amp; </span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>在我操作的过程中只遇到了一个问题，就是设备冲突，后续遇到新的问题会继续更新。</p><h2 id="设备冲突"><a href="#设备冲突" class="headerlink" title="设备冲突"></a>设备冲突</h2><p style="text-align: center;"><img src="/images/工具/deepin/3-4设备冲突.png" alt="设备冲突" style="zoom: 60%"></p>解决方案，查询设备占用，杀死进程：<p style="text-align: center;"><img src="/images/工具/deepin/3-5杀死进程.png" alt="杀死进程" style="zoom: 45%"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Deepin系统安装Go/Java8/Node/Maven/Docker环境</title>
      <link href="/p/20220503/"/>
      <url>/p/20220503/</url>
      
        <content type="html"><![CDATA[<p>Deepin工具：<br><a href="/p/20220502/" target="_blank">【转载】Deepin 20.5系统外接扩展屏幕不显示？安装配置NVIDIA显卡驱动</a><br><a href="/p/20220503/" target="_blank">【转载】Deepin系统安装Go&#x2F;Java8&#x2F;Node&#x2F;Maven&#x2F;Docker环境</a><br><a href="/p/20220504/" target="_blank">Deepin系统打开WiFi就不能开热点？三个步骤解决问题</a><br><a href="/p/20220508/" target="_blank">【wine】Deepin中使用exe（Ubuntu通用）</a></p><p>转载自：<a href="https://developer-help.cn/index.php/archives/174/">https://developer-help.cn/index.php/archives/174/</a><br>本篇文章会自动跳转到对应博客，如未跳转请点击下方链接：<br><a href="https://developer-help.cn/index.php/archives/174/">https://developer-help.cn/index.php/archives/174/</a></p><script>window.location.href = "https://developer-help.cn/index.php/archives/174/";</script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Deepin </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Deepin 20.5系统外接扩展屏幕不显示？安装配置NVIDIA显卡驱动</title>
      <link href="/p/20220502/"/>
      <url>/p/20220502/</url>
      
        <content type="html"><![CDATA[<p>Deepin工具：<br><a href="/p/20220502/" target="_blank">【转载】Deepin 20.5系统外接扩展屏幕不显示？安装配置NVIDIA显卡驱动</a><br><a href="/p/20220503/" target="_blank">【转载】Deepin系统安装Go&#x2F;Java8&#x2F;Node&#x2F;Maven&#x2F;Docker环境</a><br><a href="/p/20220504/" target="_blank">Deepin系统打开WiFi就不能开热点？三个步骤解决问题</a><br><a href="/p/20220508/" target="_blank">【wine】Deepin中使用exe（Ubuntu通用）</a></p><p>转载自：<a href="https://developer-help.cn/index.php/archives/173/">https://developer-help.cn/index.php/archives/173/</a><br>本篇文章会自动跳转到对应博客，如未跳转请点击下方链接：<br><a href="https://developer-help.cn/index.php/archives/173/">https://developer-help.cn/index.php/archives/173/</a></p><script>window.location.href = "https://developer-help.cn/index.php/archives/173/";</script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP请求</title>
      <link href="/p/20220501/"/>
      <url>/p/20220501/</url>
      
        <content type="html"><![CDATA[<h1 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h1><p>HTTP是超文本传输协议，其定义了客户端与服务器端之间文本传输的规范。HTTP默认使用80端口，当我们没有指定端口访问时，浏览器会默认帮我们添加80端口。我们也可以自己指定访问端口如：<code>http://dream.kwcoder.club:80</code>。<br>如果使用了https协议且开启强制跳转，将会自动跳转到<code>https://dream.kwcoder.club/</code><br>现在大多数访问都使用了HTTPS协议，而HTTPS的默认端口为443，如果使用80端口访问HTTPS协议的服务器可能会被拒绝。</p><h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><p>HTTP&#x2F;1.1协议中共定义了八种方法，来表明Request-URL指定的资源不同的操作方式。<br>HTTP1.0定义了三种请求方法：GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><table><thead><tr><th align="center">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">GET</td><td align="left">请求指定的页面信息，并返回实体主体。</td></tr><tr><td align="center">HEAD</td><td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头。</td></tr><tr><td align="center">POST</td><td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td></tr><tr><td align="center">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td align="center">DELETE</td><td align="left">请求服务器删除指定的页面。</td></tr><tr><td align="center">CONNECT</td><td align="left">HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="center">OPTIONS</td><td align="left">允许客户端查看服务器的性能。</td></tr><tr><td align="center">TRACE</td><td align="left">回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td align="center">PATCH</td><td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新。</td></tr></tbody></table><h1 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h1><p>向服务器发送一个请求后，服务器会给客户端一个响应，并通过相应状态码来标识响应状态。</p><table><thead><tr><th align="center">状态码</th><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">200</td><td align="left">OK</td><td align="left">当您的操作将在响应正文中返回数据时，出现此结果。</td></tr><tr><td align="center">204</td><td align="left">No Content</td><td align="left">当您的操作成功，但不在响应正文中返回数据时，出现此结果。</td></tr><tr><td align="center">304</td><td align="left">Not Modified（重定向）</td><td align="left">当测试实体自上次检索以来是否被修改时，出现此结果。</td></tr><tr><td align="center">403</td><td align="left">Forbidden</td><td align="left">客户端错误</td></tr><tr><td align="center">401</td><td align="left">Unauthorized</td><td align="left">客户端错误</td></tr><tr><td align="center">413</td><td align="left">Payload Too Large（客户端错误）</td><td align="left">当请求长度过长时，出现此结果。</td></tr><tr><td align="center">400</td><td align="left">BadRequest（客户端错误）</td><td align="left">当参数无效时，出现此结果。</td></tr><tr><td align="center">404</td><td align="left">Not Found（客户端错误）</td><td align="left">当资源不存在时，出现此结果。</td></tr><tr><td align="center">405</td><td align="left">Method Not Allowed（客户端错误）</td><td align="left">由于方法和资源组合不正确而出现此错误。 例如，您不能对一个实体集合使用 DELETE 或 PATCH。</td></tr><tr><td align="center">412</td><td align="left">Precondition Failed</td><td align="left">客户端错误</td></tr><tr><td align="center">501</td><td align="left">Not Implemented（服务器错误）</td><td align="left">当未实施某个请求的操作时，出现此结果。</td></tr><tr><td align="center">503</td><td align="left">Service Unavailable（服务器错误）</td><td align="left">当 Web API 服务不可用时，出现此结果。</td></tr></tbody></table><h1 id="httpbin工具"><a href="#httpbin工具" class="headerlink" title="httpbin工具"></a>httpbin工具</h1><h2 id="httpbin是什么？"><a href="#httpbin是什么？" class="headerlink" title="httpbin是什么？"></a>httpbin是什么？</h2><p>httpbin是一个用Flask框架编写的开源项目。<br>该网站能测试HTTP请求和响应的各种信息，比如cookie、ip、headers和登录验证等，且支持GET、POST等多种方法，对web开发和测试很有帮助。<br>官方网站：<a href="http://httpbin.org/">http://httpbin.org/</a><br>开源地址：<a href="https://github.com/Runscope/httpbin">https://github.com/Runscope/httpbin</a><br><img src="/images/web/HTTP请求/httpbin官网.png" alt="httpbin官网" style="zoom:80%;"></p><h2 id="可用API"><a href="#可用API" class="headerlink" title="可用API"></a>可用API</h2><p>kttpbin中的支持的API涉及HTTP请求方法、请求权限、响应状态码、Cookie等多种API，可用范围如下图所示。<br><img src="/images/web/HTTP请求/httpbin可用API.png" alt="httpbin可用API" style="zoom:80%;"></p><p>以GET方法为例，对<a href="https://httpbin.org/get">https://httpbin.org/get</a>地址进行请求，可以得到如下响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    </span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Accept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip, deflate, br&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Accept-Language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httpbin.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Sec-Ch-Ua&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot; Not A;Brand\&quot;;v=\&quot;99\&quot;, \&quot;Chromium\&quot;;v=\&quot;99\&quot;, \&quot;Google Chrome\&quot;;v=\&quot;99\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Sec-Ch-Ua-Mobile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;?0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Sec-Ch-Ua-Platform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;Linux\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Sec-Fetch-Dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Sec-Fetch-Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;navigate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Sec-Fetch-Site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Sec-Fetch-User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;?1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Upgrade-Insecure-Requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;X-Amzn-Trace-Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Root=1-626b6aad-3254844a2ffa93953eb0bbe9&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;35.78.203.43&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://httpbin.org/get&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：在HTTP Methods的API中，除了GET请求可以通过浏览器直接访问外，其余请求均需要通过测试软件进行测试。</strong></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTTP请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言类型</title>
      <link href="/p/20220430/"/>
      <url>/p/20220430/</url>
      
        <content type="html"><![CDATA[<h1 id="编译型语言和解释型语言"><a href="#编译型语言和解释型语言" class="headerlink" title="编译型语言和解释型语言"></a>编译型语言和解释型语言</h1><h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2><p><strong>定义：</strong> 在程序运行之前，通过编译器将源程序编译成机器码(可运行的二进制代码)，以后执行这个程序时，就不用再进行编译了。<br><strong>优点：</strong> 编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高，可以脱离语言环境独立运行。<br><strong>缺点：</strong> 编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。<br><strong>总结：</strong> 执行速度快、效率高；依靠编译器、跨平台性差些。<br><strong>代表语言：</strong> C、C++、Pascal、Object-C以及Swift。</p><h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h2><p><strong>定义：</strong> 解释型语言的源代码不是直接翻译成机器码，而是先翻译成中间代码，再由解释器对中间代码进行解释运行。在运行的时候才将源程序翻译成机器码，翻译一句，然后执行一句，直至结束。<br><strong>优点：</strong> 有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。<br><strong>缺点：</strong> 每次运行的时候都要解释一遍，性能上不如编译型语言。<br><strong>总结：</strong> 执行速度慢、效率低；依靠解释器、跨平台性好。<br><strong>代表语言：</strong> JavaScript、Python、Erlang、PHP、Perl、Ruby。</p><h2 id="半编译、半解释型语言"><a href="#半编译、半解释型语言" class="headerlink" title="半编译、半解释型语言"></a>半编译、半解释型语言</h2><p><strong>定义：</strong> 先编译，再解释的执行方式。<br><strong>优缺点：</strong> 将编译型语言和解释型语言的优点结合。<br><strong>代表语言：</strong> Java、Kotlin</p><h1 id="动态类型语言和静态类型语言"><a href="#动态类型语言和静态类型语言" class="headerlink" title="动态类型语言和静态类型语言"></a>动态类型语言和静态类型语言</h1><h2 id="动态类型语言（弱类型语言）"><a href="#动态类型语言（弱类型语言）" class="headerlink" title="动态类型语言（弱类型语言）"></a>动态类型语言（弱类型语言）</h2><p>动态类型语言：在运行期间才去做数据类型检查的语言，说的是数据类型。动态类型语言的数据类型不是在编译阶段决定的，而是把类型绑定延后到了运行阶段。<br><strong>代表语言：</strong> Python、Ruby、Erlang、JavaScript、Swift、PHP、Perl。</p><h2 id="静态类型语言（强类型语言）"><a href="#静态类型语言（强类型语言）" class="headerlink" title="静态类型语言（强类型语言）"></a>静态类型语言（强类型语言）</h2><p>静态类型语言的数据类型是在编译期间（或运行之前）确定的，编写代码的时候要明确确定变量的数据类型。<br><strong>代表语言：</strong> C、C++、C#、Java、Object-C。</p><h1 id="动态语言和静态语言"><a href="#动态语言和静态语言" class="headerlink" title="动态语言和静态语言"></a>动态语言和静态语言</h1><h2 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h2><p>运行时改变结构，说的是代码结构。在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。<br><strong>代表语言：</strong> Object-C、C#、JavaScript、PHP、Python、Erlang。</p><h2 id="静态语言"><a href="#静态语言" class="headerlink" title="静态语言"></a>静态语言</h2><p>运行时结构不可变的语言就是静态语言。如Java、C、C++。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 语言类型 </tag>
            
            <tag> 思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java简介</title>
      <link href="/p/20220429/"/>
      <url>/p/20220429/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的概念"><a href="#Java的概念" class="headerlink" title="Java的概念"></a>Java的概念</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p><h2 id="诞生背景"><a href="#诞生背景" class="headerlink" title="诞生背景"></a>诞生背景</h2><p>任职于Sun公司(Stanford University Network斯坦福网络公司)的詹姆斯·高斯林和麦克·舍林丹等人于1990年代初开发Java语言的雏形，最初被命名为Oak，Oak的目标是作为家用电器等小型系统的编程语言，用于电视机、电话、闹钟、烤面包机等家用电器的控制和通信。由于这些智能化家电的市场需求没有预期的高，Sun公司放弃了该项计划。随着1990年代互联网的发展，Sun公司发现Oak在互联网上应用的前景，于是改造了Oak，于1995年5月以Java的名称正式发布。伴随着互联网的迅猛发展，Java逐渐成为重要的网络编程语言。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><h3 id="Java-SE（J2SE，Java-2-Platform-Standard-Edition，标准版）"><a href="#Java-SE（J2SE，Java-2-Platform-Standard-Edition，标准版）" class="headerlink" title="Java SE（J2SE，Java 2 Platform Standard Edition，标准版）"></a>Java SE（J2SE，Java 2 Platform Standard Edition，标准版）</h3><p>Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为Java EE和Java ME提供基础。</p><h3 id="Java-EE（J2EE，Java-2-Platform-Enterprise-Edition，企业版）"><a href="#Java-EE（J2EE，Java-2-Platform-Enterprise-Edition，企业版）" class="headerlink" title="Java EE（J2EE，Java 2 Platform Enterprise Edition，企业版）"></a>Java EE（J2EE，Java 2 Platform Enterprise Edition，企业版）</h3><p>Java EE 以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web2.0应用程序。2018年2月，Eclipse 宣布正式将 JavaEE 更名为 JakartaEE</p><h3 id="Java-ME（J2ME，Java-2-Platform-Micro-Edition，微型版）"><a href="#Java-ME（J2ME，Java-2-Platform-Micro-Edition，微型版）" class="headerlink" title="Java ME（J2ME，Java 2 Platform Micro Edition，微型版）"></a>Java ME（J2ME，Java 2 Platform Micro Edition，微型版）</h3><p>Java ME 以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。</p><h2 id="JVM、JRE和JDK的关系"><a href="#JVM、JRE和JDK的关系" class="headerlink" title="JVM、JRE和JDK的关系"></a>JVM、JRE和JDK的关系</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java Virtual Machine是Java虚拟机，Java程序需要运行在虚拟机上，不同的平台有自己的虚拟机，因此Java语言可以实现跨平台。<br>JVM是一个比较优秀的虚拟机，除了Java以外，Kotlin、Groovy、Scala等著名语言也使用JVM作为自己的运行虚拟机。</p><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>Java Runtime Environment包括Java虚拟机和Java程序所需的核心类库等。核心类库主要是java.lang包：包含了运行Java程序必不可少的系统类，如基本数据类型、基本数学函数、字符串处理、线程、异常处理类等，系统缺省加载这个包<br>如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>Java Development Kit是提供给Java开发人员使用的，其中包含了Java的开发工具，也包括了JRE。所以安装了JDK，就无需再单独安装JRE了。其中的开发工具：编译工具(javac.exe)，打包工具(jar.exe)等</p><img src="/images/java/Java简介/jvm,jre,jdk.png" style="zoom:75%;" alt="JVM、JRE、JDK关系图"><h1 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h1><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><ol><li>Java语言的语法与C语言和C++语言很接近，从某种意义上讲，它是由C和C++演变而来，因此适合学习。 </li><li>相对C++来说，Java进行了简化和提高，如：使用接口代替了复杂的多重继承以及取消了指针，还通过实现垃圾自动回收机制，大大简化了程序员的资源释放管理工作。 </li><li>提供了丰富的类库和API文档，以及第三方开发包工具包，还有大量的基于Java的开源项目，帮助程序设计人员参考学习，JDK就是开放的源代码之一，读者可以通过分析项目的源代码，来提高自己的编程水平。<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2>面向对象就是Java语言的基础，也是Java语言的重要特性。面向对象是指以对象为基本单元，包含属性和方法。对象的状态用属性表达，对象的行为用方法表达。<br>面向对象技术使得应用程序的开发变得简单易用，节省代码。<blockquote><p>面向对象是一种编程思想，Java语言具有面向对象的特性，但是依然可以使用Java写面向过程的代码。</p></blockquote><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多线程机制使应用程序在同一时间并行执行多项任务，Java语言提供多线程之间的同步机制，这些相应的同步机制可以很好的保证不同线程，能够正确的共享数据。多线程机制使程序具有更好的交互性和实时性。</p><h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2></li><li>所谓的跨平台性，是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。这是软件发展的趋势和编程人员追求的目标。</li><li>Java通过自带的虚拟机很好地实现了跨平台性。Java源代码经过编译后生成二进制的字节码是与平台无关的，Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够Write once, run anywhere(一次编译，到处运行)的原因。Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。<h2 id="可移植"><a href="#可移植" class="headerlink" title="可移植"></a>可移植</h2>可移植性来源于跨平台性性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSIC实现的。<h2 id="健壮"><a href="#健壮" class="headerlink" title="健壮"></a>健壮</h2>Java语言的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。<h2 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h2></li><li>Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类，这也有利于软件的升级。 </li><li>Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2>此外，Java还具有分布性、安全性、高性能等特征。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
